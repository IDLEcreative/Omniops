{"version":3,"sources":["/Users/jamesguy/Omniops/__tests__/integration/enhanced-scraper-system.test.ts"],"sourcesContent":["import { describe, it, expect, jest, beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals';\nimport { AIContentExtractor, SemanticChunk, AIOptimizedContent } from '@/lib/ai-content-extractor';\nimport { PatternLearner, DomainPatterns, ExtractedPattern } from '@/lib/pattern-learner';\nimport { EnhancedRateLimiter, RateLimiterPresets, RateLimitResponse } from '@/lib/rate-limiter-enhanced';\nimport { ContentDeduplicator, ContentHash, DeduplicationMetrics } from '@/lib/content-deduplicator';\nimport { getCrawlerConfig, getAIOptimizationConfig } from '@/lib/crawler-config';\nimport { EcommerceExtractor } from '@/lib/ecommerce-extractor';\nimport { NormalizedProduct } from '@/lib/product-normalizer';\nimport type { AIOptimizationConfig } from '@/lib/scraper-api';\n\n// Test Data Generators and Fixtures\nclass TestDataGenerator {\n  static generateEcommerceHTML(productCount: number = 1): string {\n    const products = Array.from({ length: productCount }, (_, i) => `\n      <div class=\"product\" itemscope itemtype=\"https://schema.org/Product\">\n        <h1 itemprop=\"name\" class=\"product-title\">Amazing Product ${i + 1}</h1>\n        <div class=\"price-container\">\n          <span class=\"price\" itemprop=\"price\">£${(29.99 + i * 10).toFixed(2)}</span>\n          <meta itemprop=\"priceCurrency\" content=\"GBP\" />\n        </div>\n        <div class=\"sku\" itemprop=\"sku\">PROD-${String(i + 1).padStart(3, '0')}</div>\n        <div class=\"description\" itemprop=\"description\">\n          This is an amazing product with great features. \n          It offers excellent value for money and comes with a warranty.\n          Perfect for customers who want quality and reliability.\n        </div>\n        <div class=\"availability\" itemprop=\"availability\" content=\"https://schema.org/InStock\">\n          In Stock\n        </div>\n        <img src=\"/images/product${i + 1}.jpg\" alt=\"Product ${i + 1}\" itemprop=\"image\" />\n      </div>\n    `).join('\\n');\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>E-commerce Test Store</title>\n        <meta name=\"description\" content=\"Test store with amazing products\" />\n      </head>\n      <body>\n        <header class=\"site-header\">\n          <nav class=\"navigation\">\n            <ul>\n              <li><a href=\"/\">Home</a></li>\n              <li><a href=\"/products\">Products</a></li>\n              <li><a href=\"/about\">About</a></li>\n              <li><a href=\"/contact\">Contact</a></li>\n            </ul>\n          </nav>\n        </header>\n        \n        <main class=\"main-content\">\n          <h1>Our Products</h1>\n          <div class=\"products-grid\">\n            ${products}\n          </div>\n        </main>\n        \n        <footer class=\"site-footer\">\n          <p>&copy; 2024 Test Store. All rights reserved.</p>\n          <p>Contact us: info@teststore.com | Phone: +44 123 456 7890</p>\n          <div class=\"footer-links\">\n            <a href=\"/privacy\">Privacy Policy</a>\n            <a href=\"/terms\">Terms of Service</a>\n            <a href=\"/shipping\">Shipping Info</a>\n          </div>\n        </footer>\n      </body>\n      </html>\n    `;\n  }\n\n  static generateTemplateVariationHTML(variation: number): string {\n    const productNames = ['Laptop', 'Smartphone', 'Tablet', 'Headphones', 'Camera'];\n    const prices = [999, 599, 399, 199, 1299];\n    const skus = ['LAP-001', 'PHN-002', 'TAB-003', 'HDP-004', 'CAM-005'];\n\n    return `\n      <div class=\"product-card\">\n        <h2>${productNames[variation]}</h2>\n        <div class=\"price-info\">\n          <span class=\"current-price\">£${prices[variation]}</span>\n          <span class=\"currency\">GBP</span>\n        </div>\n        <div class=\"product-code\">${skus[variation]}</div>\n        <div class=\"stock-status\">Available</div>\n        <p class=\"product-summary\">\n          High-quality ${productNames[variation].toLowerCase()} with premium features.\n          Excellent build quality and customer satisfaction guaranteed.\n          Perfect for ${variation % 2 === 0 ? 'professionals' : 'consumers'}.\n        </p>\n      </div>\n    `;\n  }\n\n  static generateLargeContentHTML(): string {\n    const sections = Array.from({ length: 50 }, (_, i) => `\n      <section class=\"content-section\">\n        <h2>Section ${i + 1}</h2>\n        <p>This is a large content section with lots of text. ${Array.from({ length: 100 }, () => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.').join(' ')}</p>\n      </section>\n    `).join('\\n');\n\n    return `\n      <html>\n        <body>\n          <div class=\"large-content\">\n            ${sections}\n          </div>\n        </body>\n      </html>\n    `;\n  }\n}\n\n// Mock Utilities\nclass MockUtilities {\n  static createSupabaseMock() {\n    return {\n      from: jest.fn().mockReturnThis(),\n      select: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      upsert: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      single: jest.fn(),\n      limit: jest.fn().mockReturnThis(),\n      order: jest.fn().mockReturnThis(),\n    };\n  }\n\n  static createRedisMock() {\n    const storage = new Map<string, string>();\n    const sets = new Map<string, Set<string>>();\n\n    return {\n      get: jest.fn((key: string) => Promise.resolve(storage.get(key) || null)),\n      set: jest.fn((key: string, value: string) => {\n        storage.set(key, value);\n        return Promise.resolve('OK');\n      }),\n      setex: jest.fn((key: string, ttl: number, value: string) => {\n        storage.set(key, value);\n        return Promise.resolve('OK');\n      }),\n      del: jest.fn((key: string) => {\n        const existed = storage.has(key);\n        storage.delete(key);\n        return Promise.resolve(existed ? 1 : 0);\n      }),\n      sadd: jest.fn((key: string, ...values: string[]) => {\n        if (!sets.has(key)) sets.set(key, new Set());\n        const set = sets.get(key)!;\n        let added = 0;\n        values.forEach(value => {\n          if (!set.has(value)) {\n            set.add(value);\n            added++;\n          }\n        });\n        return Promise.resolve(added);\n      }),\n      smembers: jest.fn((key: string) => {\n        const set = sets.get(key);\n        return Promise.resolve(set ? Array.from(set) : []);\n      }),\n      srem: jest.fn((key: string, ...values: string[]) => {\n        const set = sets.get(key);\n        if (!set) return Promise.resolve(0);\n        let removed = 0;\n        values.forEach(value => {\n          if (set.delete(value)) removed++;\n        });\n        return Promise.resolve(removed);\n      }),\n      flushall: jest.fn(() => {\n        storage.clear();\n        sets.clear();\n        return Promise.resolve('OK');\n      }),\n      eval: jest.fn(),\n      hmget: jest.fn(),\n      hmset: jest.fn(),\n      hincrby: jest.fn(),\n      expire: jest.fn(),\n      quit: jest.fn(() => Promise.resolve()),\n      on: jest.fn(),\n    };\n  }\n\n  static createOpenAIMock() {\n    return {\n      chat: {\n        completions: {\n          create: jest.fn().mockResolvedValue({\n            choices: [\n              {\n                message: {\n                  content: JSON.stringify({\n                    summary: \"Test AI-generated summary\",\n                    keyFacts: [\"Fact 1\", \"Fact 2\", \"Fact 3\"],\n                    topicTags: [\"tag1\", \"tag2\", \"tag3\"]\n                  })\n                }\n              }\n            ]\n          })\n        }\n      },\n      embeddings: {\n        create: jest.fn().mockResolvedValue({\n          data: [{ embedding: Array(1536).fill(0.1) }]\n        })\n      }\n    };\n  }\n}\n\n// Performance Monitoring Utilities\nclass PerformanceMonitor {\n  private startTime: number = 0;\n  private checkpoints: Map<string, number> = new Map();\n\n  start(): void {\n    this.startTime = Date.now();\n    this.checkpoints.clear();\n  }\n\n  checkpoint(name: string): number {\n    const now = Date.now();\n    const elapsed = now - this.startTime;\n    this.checkpoints.set(name, elapsed);\n    return elapsed;\n  }\n\n  getResults(): { totalTime: number; checkpoints: Record<string, number> } {\n    const totalTime = Date.now() - this.startTime;\n    const checkpoints: Record<string, number> = {};\n    \n    for (const [name, time] of this.checkpoints.entries()) {\n      checkpoints[name] = time;\n    }\n\n    return { totalTime, checkpoints };\n  }\n}\n\n// Memory Usage Utilities\nclass MemoryTracker {\n  private initialMemory: NodeJS.MemoryUsage;\n\n  constructor() {\n    this.initialMemory = process.memoryUsage();\n  }\n\n  getCurrentUsage(): {\n    heapUsed: number;\n    heapTotal: number;\n    external: number;\n    rss: number;\n    heapUsedDelta: number;\n  } {\n    const current = process.memoryUsage();\n    return {\n      heapUsed: Math.round(current.heapUsed / 1024 / 1024), // MB\n      heapTotal: Math.round(current.heapTotal / 1024 / 1024), // MB\n      external: Math.round(current.external / 1024 / 1024), // MB\n      rss: Math.round(current.rss / 1024 / 1024), // MB\n      heapUsedDelta: Math.round((current.heapUsed - this.initialMemory.heapUsed) / 1024 / 1024), // MB\n    };\n  }\n}\n\n// Test Helper Functions\nconst TestHelpers = {\n  async sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  },\n\n  validateSemanticChunks(chunks: SemanticChunk[]): void {\n    expect(chunks).toBeDefined();\n    expect(Array.isArray(chunks)).toBe(true);\n    \n    chunks.forEach(chunk => {\n      expect(chunk).toHaveProperty('id');\n      expect(chunk).toHaveProperty('type');\n      expect(chunk).toHaveProperty('content');\n      expect(chunk).toHaveProperty('tokens');\n      expect(chunk).toHaveProperty('relevanceScore');\n      expect(chunk).toHaveProperty('metadata');\n      expect(chunk.tokens).toBeGreaterThan(0);\n      expect(chunk.relevanceScore).toBeGreaterThanOrEqual(0);\n      expect(chunk.relevanceScore).toBeLessThanOrEqual(1);\n    });\n  },\n\n  validateAIOptimizedContent(content: AIOptimizedContent): void {\n    expect(content).toHaveProperty('originalTokens');\n    expect(content).toHaveProperty('optimizedTokens');\n    expect(content).toHaveProperty('compressionRatio');\n    expect(content).toHaveProperty('chunks');\n    expect(content).toHaveProperty('summary');\n    expect(content).toHaveProperty('keyFacts');\n    expect(content).toHaveProperty('qaPairs');\n    expect(content).toHaveProperty('topicTags');\n    expect(content).toHaveProperty('processingStats');\n    \n    expect(content.originalTokens).toBeGreaterThanOrEqual(content.optimizedTokens);\n    expect(content.compressionRatio).toBeGreaterThanOrEqual(0);\n    expect(Array.isArray(content.chunks)).toBe(true);\n    expect(Array.isArray(content.keyFacts)).toBe(true);\n    expect(Array.isArray(content.qaPairs)).toBe(true);\n    expect(Array.isArray(content.topicTags)).toBe(true);\n  },\n\n  validateNormalizedProduct(product: NormalizedProduct): void {\n    expect(product).toHaveProperty('name');\n    expect(product).toHaveProperty('scrapedAt');\n    expect(typeof product.name).toBe('string');\n    expect(product.name.length).toBeGreaterThan(0);\n    \n    if (product.price) {\n      expect(product.price).toHaveProperty('amount');\n      expect(product.price).toHaveProperty('currency');\n      expect(product.price).toHaveProperty('formatted');\n      expect(typeof product.price.amount).toBe('number');\n      expect(product.price.amount).toBeGreaterThan(0);\n    }\n  }\n};\n\n// Main Integration Tests\ndescribe('Enhanced Scraper System Integration Tests', () => {\n  let supabaseMock: ReturnType<typeof MockUtilities.createSupabaseMock>;\n  let redisMock: ReturnType<typeof MockUtilities.createRedisMock>;\n  let openaiMock: ReturnType<typeof MockUtilities.createOpenAIMock>;\n  let rateLimiter: EnhancedRateLimiter;\n  let deduplicator: ContentDeduplicator;\n  let performanceMonitor: PerformanceMonitor;\n  let memoryTracker: MemoryTracker;\n\n  beforeAll(() => {\n    // Set environment variables for testing\n    process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';\n    process.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-key';\n    process.env.REDIS_URL = 'redis://localhost:6379';\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Initialize mocks\n    supabaseMock = MockUtilities.createSupabaseMock();\n    redisMock = MockUtilities.createRedisMock();\n    openaiMock = MockUtilities.createOpenAIMock();\n\n    // Mock external libraries\n    jest.doMock('@supabase/supabase-js', () => ({\n      createClient: jest.fn(() => supabaseMock)\n    }));\n\n    jest.doMock('ioredis', () => {\n      return jest.fn(() => redisMock);\n    });\n\n    jest.doMock('openai', () => {\n      return jest.fn(() => openaiMock);\n    });\n\n    // Initialize system components\n    rateLimiter = new EnhancedRateLimiter(RateLimiterPresets.moderate);\n    deduplicator = new ContentDeduplicator();\n    performanceMonitor = new PerformanceMonitor();\n    memoryTracker = new MemoryTracker();\n\n    // Clear AI content extractor cache\n    AIContentExtractor.clearCache();\n  });\n\n  afterEach(async () => {\n    await rateLimiter.close();\n    await deduplicator.clearCache();\n    jest.restoreAllMocks();\n  });\n\n  describe('1. E-commerce Scraping with AI Optimization', () => {\n    it('should complete full e-commerce extraction pipeline', async () => {\n      performanceMonitor.start();\n\n      // Generate test e-commerce HTML\n      const testHTML = TestDataGenerator.generateEcommerceHTML(3);\n      const testURL = 'https://teststore.com/products';\n\n      performanceMonitor.checkpoint('html-generated');\n\n      // Step 1: AI Content Optimization\n      const optimizedContent = await AIContentExtractor.extractOptimized(testHTML, testURL);\n      \n      TestHelpers.validateAIOptimizedContent(optimizedContent);\n      expect(optimizedContent.compressionRatio).toBeGreaterThan(0.1);\n      expect(optimizedContent.chunks.length).toBeGreaterThan(0);\n\n      performanceMonitor.checkpoint('ai-optimization-complete');\n\n      // Step 2: E-commerce Extraction\n      const extractor = new EcommerceExtractor();\n      const products = await extractor.extractProducts(testHTML, { url: testURL });\n      \n      expect(products.length).toBe(3);\n      products.forEach(TestHelpers.validateNormalizedProduct);\n\n      performanceMonitor.checkpoint('ecommerce-extraction-complete');\n\n      // Step 3: Content Deduplication\n      const contentHash = await deduplicator.processContent(\n        optimizedContent.content,\n        testURL,\n        {\n          similarityThreshold: 0.8,\n          enableCompression: true,\n          batchSize: 100,\n          useRedis: false,\n          detectTemplates: true\n        }\n      );\n\n      expect(contentHash).toBeTruthy();\n      expect(typeof contentHash).toBe('string');\n\n      performanceMonitor.checkpoint('deduplication-complete');\n\n      // Step 4: Pattern Learning\n      await PatternLearner.learnFromExtraction(testURL, products, {\n        platform: 'custom',\n        selectors: {\n          name: '.product-title',\n          price: '.price',\n          sku: '.sku'\n        },\n        extractionMethod: 'dom'\n      });\n\n      performanceMonitor.checkpoint('pattern-learning-complete');\n\n      // Validate final results\n      const results = performanceMonitor.getResults();\n      const memoryUsage = memoryTracker.getCurrentUsage();\n\n      expect(results.totalTime).toBeLessThan(30000); // Should complete within 30 seconds\n      expect(memoryUsage.heapUsedDelta).toBeLessThan(100); // Should not use more than 100MB extra\n\n      console.log('E-commerce pipeline performance:', {\n        totalTime: results.totalTime,\n        checkpoints: results.checkpoints,\n        memoryUsage: memoryUsage,\n        compressionRatio: optimizedContent.compressionRatio,\n        productsExtracted: products.length\n      });\n    });\n\n    it('should handle token reduction effectively', async () => {\n      const testHTML = TestDataGenerator.generateLargeContentHTML();\n      const testURL = 'https://large-content.com/page';\n\n      const optimizedContent = await AIContentExtractor.extractOptimized(testHTML, testURL);\n\n      // Verify significant token reduction\n      expect(optimizedContent.compressionRatio).toBeGreaterThan(0.3);\n      expect(optimizedContent.optimizedTokens).toBeLessThan(optimizedContent.originalTokens);\n      expect(optimizedContent.processingStats.removedElements).toBeGreaterThan(0);\n\n      // Verify semantic chunks are created\n      TestHelpers.validateSemanticChunks(optimizedContent.chunks);\n      expect(optimizedContent.chunks.some(c => c.type === 'main')).toBe(true);\n\n      // Verify metadata generation\n      expect(optimizedContent.summary.length).toBeGreaterThan(10);\n      expect(optimizedContent.keyFacts.length).toBeGreaterThanOrEqual(0);\n      expect(optimizedContent.topicTags.length).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('2. Pattern Learning Flow', () => {\n    it('should learn and apply patterns effectively', async () => {\n      const testURL = 'https://pattern-test.com/product';\n      const testHTML = TestDataGenerator.generateEcommerceHTML(1);\n\n      // Mock existing patterns\n      supabaseMock.single.mockResolvedValueOnce({ data: null, error: null });\n      supabaseMock.insert.mockResolvedValue({ data: {}, error: null });\n\n      // Step 1: First scrape learns patterns\n      const extractor = new EcommerceExtractor();\n      const firstProducts = await extractor.extractProducts(testHTML, { url: testURL });\n      \n      await PatternLearner.learnFromExtraction(testURL, firstProducts, {\n        platform: 'test-platform',\n        selectors: { name: '.product-title', price: '.price' },\n        extractionMethod: 'dom'\n      });\n\n      expect(supabaseMock.insert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          domain: 'pattern-test.com',\n          platform: 'test-platform',\n          patterns: expect.arrayContaining([\n            expect.objectContaining({\n              fieldType: 'name',\n              confidence: expect.any(Number)\n            })\n          ])\n        })\n      );\n\n      // Step 2: Second scrape uses learned patterns\n      const mockPatterns: DomainPatterns = {\n        domain: 'pattern-test.com',\n        platform: 'test-platform',\n        patterns: [\n          {\n            selector: '.product-title',\n            fieldType: 'name',\n            confidence: 0.95,\n            extractionMethod: 'dom'\n          },\n          {\n            selector: '.price',\n            fieldType: 'price',\n            confidence: 0.90,\n            extractionMethod: 'dom'\n          }\n        ],\n        lastUpdated: new Date().toISOString(),\n        successRate: 0.95,\n        totalExtractions: 5\n      };\n\n      supabaseMock.single.mockResolvedValue({ data: mockPatterns, error: null });\n\n      const patterns = await PatternLearner.getPatterns(testURL);\n      expect(patterns).toEqual(mockPatterns);\n      expect(patterns!.successRate).toBe(0.95);\n      expect(patterns!.patterns.length).toBe(2);\n\n      // Step 3: Verify performance improvement\n      expect(patterns!.patterns.every(p => p.confidence >= 0.9)).toBe(true);\n    });\n\n    it('should update pattern confidence over time', async () => {\n      const testURL = 'https://confidence-test.com/product';\n      \n      const existingPatterns: DomainPatterns = {\n        domain: 'confidence-test.com',\n        patterns: [\n          {\n            selector: '.product-name',\n            fieldType: 'name',\n            confidence: 0.7,\n            extractionMethod: 'dom'\n          }\n        ],\n        lastUpdated: new Date().toISOString(),\n        successRate: 0.8,\n        totalExtractions: 10\n      };\n\n      supabaseMock.single.mockResolvedValue({ data: existingPatterns, error: null });\n      supabaseMock.update.mockResolvedValue({ data: {}, error: null });\n\n      // Simulate successful pattern usage\n      await PatternLearner.updatePatternSuccess(testURL, true, ['name:.product-name']);\n\n      expect(supabaseMock.update).toHaveBeenCalledWith(\n        expect.objectContaining({\n          totalExtractions: 11,\n          successRate: expect.any(Number)\n        })\n      );\n    });\n  });\n\n  describe('3. Rate Limiting Integration', () => {\n    it('should handle multiple rapid requests with proper throttling', async () => {\n      const domain = 'rate-limit-test.com';\n      const requests: Promise<RateLimitResponse>[] = [];\n\n      // Create 10 rapid requests\n      for (let i = 0; i < 10; i++) {\n        requests.push(rateLimiter.checkRateLimit(domain));\n      }\n\n      const responses = await Promise.all(requests);\n      \n      // Some requests should be allowed, others should be rate limited\n      const allowedCount = responses.filter(r => r.allowed).length;\n      const rateLimitedCount = responses.filter(r => !r.allowed).length;\n\n      expect(allowedCount).toBeGreaterThan(0);\n      expect(rateLimitedCount).toBeGreaterThan(0);\n      expect(allowedCount + rateLimitedCount).toBe(10);\n\n      // Wait time should be provided for rate-limited requests\n      const rateLimitedResponses = responses.filter(r => !r.allowed);\n      rateLimitedResponses.forEach(response => {\n        expect(response.waitTimeMs).toBeGreaterThan(0);\n        expect(response.resetTime).toBeGreaterThan(Date.now());\n      });\n    });\n\n    it('should apply exponential backoff on 429 responses', async () => {\n      const domain = 'backoff-test.com';\n      \n      // Simulate 429 responses\n      for (let i = 0; i < 3; i++) {\n        await rateLimiter.reportRequestResult({\n          domain,\n          timestamp: Date.now(),\n          responseTime: 1000,\n          statusCode: 429,\n          success: false,\n          retryCount: i\n        });\n      }\n\n      // Check rate limit after failures\n      const response = await rateLimiter.checkRateLimit(domain, { retryCount: 3 });\n      \n      if (!response.allowed) {\n        // Should have increased wait time due to backoff\n        expect(response.waitTimeMs).toBeGreaterThan(1000);\n      }\n    });\n\n    it('should trigger circuit breaker after consecutive failures', async () => {\n      const domain = 'circuit-breaker-test.com';\n      \n      // Simulate multiple failures to trigger circuit breaker\n      for (let i = 0; i < 6; i++) {\n        await rateLimiter.reportRequestResult({\n          domain,\n          timestamp: Date.now(),\n          responseTime: 5000,\n          statusCode: 503,\n          success: false,\n          retryCount: 0\n        });\n      }\n\n      // Circuit breaker should now be open\n      const response = await rateLimiter.checkRateLimit(domain);\n      \n      expect(response.allowed).toBe(false);\n      expect(response.reason).toBe('Circuit breaker open');\n      expect(response.waitTimeMs).toBeGreaterThan(0);\n    });\n  });\n\n  describe('4. Configuration Management', () => {\n    it('should load different presets correctly', async () => {\n      const fastConfig = getCrawlerConfig('fast');\n      const carefulConfig = getCrawlerConfig('careful');\n      const ecommerceConfig = getCrawlerConfig('ecommerce');\n\n      // Verify different concurrency settings\n      expect(fastConfig.maxConcurrency).toBeGreaterThan(carefulConfig.maxConcurrency);\n      expect(fastConfig.timeouts.request).toBeLessThan(carefulConfig.timeouts.request);\n\n      // Verify e-commerce specific settings\n      expect(ecommerceConfig.content.extractImages).toBe(true);\n      expect(ecommerceConfig.content.minWordCount).toBeLessThan(fastConfig.content.minWordCount);\n    });\n\n    it('should apply runtime overrides correctly', async () => {\n      // Test environment variable overrides\n      const originalConcurrency = process.env.CRAWLER_MAX_CONCURRENCY;\n      process.env.CRAWLER_MAX_CONCURRENCY = '15';\n\n      const config = getCrawlerConfig('fast');\n      expect(config.maxConcurrency).toBe(15);\n\n      // Restore original value\n      if (originalConcurrency !== undefined) {\n        process.env.CRAWLER_MAX_CONCURRENCY = originalConcurrency;\n      } else {\n        delete process.env.CRAWLER_MAX_CONCURRENCY;\n      }\n    });\n\n    it('should provide AI optimization configurations', async () => {\n      const standardConfig = getAIOptimizationConfig('standard');\n      const qualityConfig = getAIOptimizationConfig('quality');\n\n      expect(standardConfig.enabled).toBe(true);\n      expect(standardConfig.level).toBe('standard');\n      expect(standardConfig.tokenTarget).toBe(2000);\n\n      expect(qualityConfig.tokenTarget).toBeGreaterThan(standardConfig.tokenTarget);\n      expect(qualityConfig.preserveContent.length).toBeGreaterThan(standardConfig.preserveContent.length);\n    });\n  });\n\n  describe('5. Complete Pipeline Test', () => {\n    it('should process complete scraping workflow', async () => {\n      performanceMonitor.start();\n      const testURL = 'https://complete-test.com/products';\n      const testHTML = TestDataGenerator.generateEcommerceHTML(2);\n\n      // Step 1: Rate limiting check\n      const rateCheckResponse = await rateLimiter.checkRateLimit('complete-test.com');\n      if (rateCheckResponse.waitTimeMs > 0) {\n        await TestHelpers.sleep(Math.min(rateCheckResponse.waitTimeMs, 100));\n      }\n      expect(rateCheckResponse.allowed).toBe(true);\n\n      performanceMonitor.checkpoint('rate-limit-check');\n\n      // Step 2: AI Content Optimization\n      const optimizedContent = await AIContentExtractor.extractOptimized(testHTML, testURL);\n      expect(optimizedContent.compressionRatio).toBeGreaterThan(0);\n\n      performanceMonitor.checkpoint('ai-optimization');\n\n      // Step 3: E-commerce Product Extraction\n      const extractor = new EcommerceExtractor();\n      const products = await extractor.extractProducts(testHTML, { url: testURL });\n      expect(products.length).toBe(2);\n\n      performanceMonitor.checkpoint('product-extraction');\n\n      // Step 4: Content Deduplication\n      const dedupHash = await deduplicator.processContent(optimizedContent.content, testURL);\n      expect(dedupHash).toBeTruthy();\n\n      performanceMonitor.checkpoint('deduplication');\n\n      // Step 5: Metadata Generation\n      expect(optimizedContent.summary.length).toBeGreaterThan(0);\n      expect(optimizedContent.keyFacts.length).toBeGreaterThanOrEqual(0);\n      expect(optimizedContent.topicTags.length).toBeGreaterThanOrEqual(0);\n\n      performanceMonitor.checkpoint('metadata-generation');\n\n      // Step 6: Pattern Learning\n      await PatternLearner.learnFromExtraction(testURL, products, {\n        platform: 'test',\n        selectors: { name: '.product-title', price: '.price' },\n        extractionMethod: 'dom'\n      });\n\n      performanceMonitor.checkpoint('pattern-learning');\n\n      // Step 7: Report request success\n      await rateLimiter.reportRequestResult({\n        domain: 'complete-test.com',\n        timestamp: Date.now(),\n        responseTime: 2000,\n        statusCode: 200,\n        success: true,\n        retryCount: 0\n      });\n\n      performanceMonitor.checkpoint('request-reporting');\n\n      // Validate final pipeline output\n      const finalResults = performanceMonitor.getResults();\n      const memoryUsage = memoryTracker.getCurrentUsage();\n\n      expect(finalResults.totalTime).toBeLessThan(15000); // Complete within 15 seconds\n      expect(memoryUsage.heapUsedDelta).toBeLessThan(50); // Memory efficient\n\n      console.log('Complete pipeline results:', {\n        performance: finalResults,\n        memory: memoryUsage,\n        optimizationRatio: optimizedContent.compressionRatio,\n        productsFound: products.length,\n        chunksCreated: optimizedContent.chunks.length\n      });\n    });\n\n    it('should handle data flow between components correctly', async () => {\n      const testURL = 'https://dataflow-test.com/product';\n      const testHTML = TestDataGenerator.generateEcommerceHTML(1);\n\n      // Extract product data\n      const extractor = new EcommerceExtractor();\n      const products = await extractor.extractProducts(testHTML, { url: testURL });\n      const product = products[0];\n\n      // Verify product data structure\n      TestHelpers.validateNormalizedProduct(product);\n\n      // Extract optimized content\n      const optimizedContent = await AIContentExtractor.extractOptimized(testHTML, testURL);\n      \n      // Verify content contains product information\n      expect(optimizedContent.content.toLowerCase()).toContain(product.name.toLowerCase());\n      \n      if (product.price) {\n        expect(optimizedContent.content).toContain(product.price.formatted);\n      }\n\n      // Verify chunk types are appropriate\n      const chunkTypes = new Set(optimizedContent.chunks.map(c => c.type));\n      expect(chunkTypes.has('main')).toBe(true);\n\n      // Deduplicate content\n      const hash = await deduplicator.processContent(optimizedContent.content, testURL);\n      const retrievedContent = await deduplicator.getContent(hash);\n      \n      expect(retrievedContent).toBeTruthy();\n      expect(retrievedContent).toContain(product.name);\n    });\n\n    it('should validate final output structure meets requirements', async () => {\n      const testHTML = TestDataGenerator.generateEcommerceHTML(1);\n      const testURL = 'https://output-validation.com/product';\n\n      // Complete processing\n      const optimizedContent = await AIContentExtractor.extractOptimized(testHTML, testURL);\n      const extractor = new EcommerceExtractor();\n      const products = await extractor.extractProducts(testHTML, { url: testURL });\n\n      // Validate AI optimized content structure\n      expect(optimizedContent).toHaveProperty('originalTokens');\n      expect(optimizedContent).toHaveProperty('optimizedTokens');\n      expect(optimizedContent).toHaveProperty('compressionRatio');\n      expect(optimizedContent).toHaveProperty('chunks');\n      expect(optimizedContent).toHaveProperty('summary');\n      expect(optimizedContent).toHaveProperty('keyFacts');\n      expect(optimizedContent).toHaveProperty('qaPairs');\n      expect(optimizedContent).toHaveProperty('topicTags');\n      expect(optimizedContent).toHaveProperty('processingStats');\n\n      // Validate product structure\n      expect(products).toBeInstanceOf(Array);\n      expect(products.length).toBeGreaterThan(0);\n      \n      products.forEach(product => {\n        expect(product).toHaveProperty('name');\n        expect(product).toHaveProperty('scrapedAt');\n        expect(typeof product.name).toBe('string');\n        expect(product.name.length).toBeGreaterThan(0);\n      });\n\n      // Validate processing stats\n      expect(optimizedContent.processingStats).toHaveProperty('removedElements');\n      expect(optimizedContent.processingStats).toHaveProperty('deduplicatedSections');\n      expect(optimizedContent.processingStats).toHaveProperty('compressionTime');\n      expect(optimizedContent.processingStats.compressionTime).toBeGreaterThan(0);\n    });\n  });\n\n  describe('6. Migration Tool Test', () => {\n    it('should optimize existing scraped data', async () => {\n      // Mock existing unoptimized data\n      const existingData = {\n        url: 'https://migration-test.com/product',\n        content: TestDataGenerator.generateLargeContentHTML(),\n        metadata: { title: 'Test Product', description: 'Test Description' }\n      };\n\n      // Run optimization migration\n      const optimizedContent = await AIContentExtractor.extractOptimized(\n        existingData.content,\n        existingData.url\n      );\n\n      // Verify optimization occurred\n      expect(optimizedContent.originalTokens).toBeGreaterThan(optimizedContent.optimizedTokens);\n      expect(optimizedContent.compressionRatio).toBeGreaterThan(0.1);\n\n      // Verify content preserved\n      expect(optimizedContent.content).toBeTruthy();\n      expect(optimizedContent.summary).toBeTruthy();\n\n      // Generate migration report\n      const report = {\n        originalSize: optimizedContent.originalTokens,\n        optimizedSize: optimizedContent.optimizedTokens,\n        compressionRatio: optimizedContent.compressionRatio,\n        tokensSaved: optimizedContent.originalTokens - optimizedContent.optimizedTokens,\n        processingTime: optimizedContent.processingStats.compressionTime\n      };\n\n      expect(report.tokensSaved).toBeGreaterThan(0);\n      expect(report.compressionRatio).toBeGreaterThan(0);\n\n      console.log('Migration optimization report:', report);\n    });\n\n    it('should handle batch optimization of existing data', async () => {\n      const existingDataBatch = [\n        { url: 'https://batch1.com', content: TestDataGenerator.generateEcommerceHTML(1) },\n        { url: 'https://batch2.com', content: TestDataGenerator.generateEcommerceHTML(1) },\n        { url: 'https://batch3.com', content: TestDataGenerator.generateEcommerceHTML(1) }\n      ];\n\n      const optimizationResults = await Promise.all(\n        existingDataBatch.map(async item => {\n          const optimized = await AIContentExtractor.extractOptimized(item.content, item.url);\n          return {\n            url: item.url,\n            originalTokens: optimized.originalTokens,\n            optimizedTokens: optimized.optimizedTokens,\n            compressionRatio: optimized.compressionRatio\n          };\n        })\n      );\n\n      // Verify all items were optimized\n      expect(optimizationResults.length).toBe(3);\n      \n      optimizationResults.forEach(result => {\n        expect(result.compressionRatio).toBeGreaterThan(0);\n        expect(result.optimizedTokens).toBeLessThanOrEqual(result.originalTokens);\n      });\n\n      // Calculate batch statistics\n      const totalTokensSaved = optimizationResults.reduce(\n        (sum, result) => sum + (result.originalTokens - result.optimizedTokens),\n        0\n      );\n      \n      const averageCompressionRatio = optimizationResults.reduce(\n        (sum, result) => sum + result.compressionRatio,\n        0\n      ) / optimizationResults.length;\n\n      expect(totalTokensSaved).toBeGreaterThan(0);\n      expect(averageCompressionRatio).toBeGreaterThan(0);\n\n      console.log('Batch migration results:', {\n        itemsProcessed: optimizationResults.length,\n        totalTokensSaved,\n        averageCompressionRatio\n      });\n    });\n  });\n\n  describe('7. Error Scenarios and Edge Cases', () => {\n    it('should handle malformed HTML gracefully', async () => {\n      const malformedHTML = '<html><body><div>Unclosed div<p>Unclosed paragraph</body>';\n      const testURL = 'https://malformed-test.com';\n\n      // Should not throw errors\n      const optimizedContent = await AIContentExtractor.extractOptimized(malformedHTML, testURL);\n      \n      expect(optimizedContent).toBeDefined();\n      expect(optimizedContent.content).toBeTruthy();\n    });\n\n    it('should handle empty content', async () => {\n      const emptyHTML = '<html><body></body></html>';\n      const testURL = 'https://empty-test.com';\n\n      const optimizedContent = await AIContentExtractor.extractOptimized(emptyHTML, testURL);\n      \n      expect(optimizedContent.originalTokens).toBe(0);\n      expect(optimizedContent.optimizedTokens).toBe(0);\n      expect(optimizedContent.chunks.length).toBe(0);\n    });\n\n    it('should handle network timeouts in rate limiter', async () => {\n      const domain = 'timeout-test.com';\n      \n      // Simulate network timeout\n      await rateLimiter.reportRequestResult({\n        domain,\n        timestamp: Date.now(),\n        responseTime: 30000, // 30 second timeout\n        statusCode: 0, // Network error\n        success: false,\n        retryCount: 0\n      });\n\n      const response = await rateLimiter.checkRateLimit(domain);\n      expect(response).toBeDefined();\n    });\n\n    it('should handle database connection failures', async () => {\n      // Mock database error\n      supabaseMock.single.mockRejectedValue(new Error('Database connection failed'));\n\n      const testURL = 'https://db-error-test.com/product';\n      const products = [{ name: 'Test Product', scrapedAt: new Date().toISOString() }];\n\n      // Should not throw error\n      await expect(PatternLearner.learnFromExtraction(testURL, products, {}))\n        .resolves.toBeUndefined();\n    });\n  });\n\n  describe('8. Performance Benchmarks', () => {\n    it('should meet performance benchmarks for large content', async () => {\n      const largeHTML = TestDataGenerator.generateLargeContentHTML();\n      const testURL = 'https://performance-test.com/large';\n\n      const startTime = Date.now();\n      const optimizedContent = await AIContentExtractor.extractOptimized(largeHTML, testURL);\n      const processingTime = Date.now() - startTime;\n\n      // Performance benchmarks\n      expect(processingTime).toBeLessThan(10000); // Under 10 seconds\n      expect(optimizedContent.compressionRatio).toBeGreaterThan(0.3); // At least 30% reduction\n      expect(optimizedContent.processingStats.compressionTime).toBeLessThan(processingTime);\n\n      console.log('Large content performance:', {\n        processingTime,\n        compressionRatio: optimizedContent.compressionRatio,\n        originalTokens: optimizedContent.originalTokens,\n        optimizedTokens: optimizedContent.optimizedTokens\n      });\n    });\n\n    it('should maintain memory efficiency during processing', async () => {\n      const initialMemory = memoryTracker.getCurrentUsage();\n      \n      // Process multiple items\n      for (let i = 0; i < 5; i++) {\n        const html = TestDataGenerator.generateEcommerceHTML(2);\n        const url = `https://memory-test-${i}.com/products`;\n        \n        await AIContentExtractor.extractOptimized(html, url);\n      }\n\n      const finalMemory = memoryTracker.getCurrentUsage();\n      const memoryIncrease = finalMemory.heapUsedDelta;\n\n      // Memory should not increase dramatically\n      expect(memoryIncrease).toBeLessThan(100); // Less than 100MB increase\n\n      console.log('Memory efficiency test:', {\n        initialMemory: initialMemory.heapUsed,\n        finalMemory: finalMemory.heapUsed,\n        memoryIncrease\n      });\n    });\n\n    it('should handle concurrent processing efficiently', async () => {\n      const concurrentTasks = Array.from({ length: 5 }, (_, i) => {\n        const html = TestDataGenerator.generateEcommerceHTML(1);\n        const url = `https://concurrent-test-${i}.com/product`;\n        return AIContentExtractor.extractOptimized(html, url);\n      });\n\n      const startTime = Date.now();\n      const results = await Promise.all(concurrentTasks);\n      const totalTime = Date.now() - startTime;\n\n      // Verify all tasks completed successfully\n      expect(results.length).toBe(5);\n      results.forEach(result => {\n        expect(result.compressionRatio).toBeGreaterThan(0);\n      });\n\n      // Concurrent processing should be efficient\n      expect(totalTime).toBeLessThan(15000); // Under 15 seconds for 5 concurrent tasks\n\n      console.log('Concurrent processing test:', {\n        tasksCount: results.length,\n        totalTime,\n        averageTime: totalTime / results.length,\n        averageCompressionRatio: results.reduce((sum, r) => sum + r.compressionRatio, 0) / results.length\n      });\n    });\n  });\n\n  describe('9. Integration with External Services', () => {\n    it('should mock external API calls correctly', async () => {\n      // Verify OpenAI mock is working\n      expect(openaiMock.chat.completions.create).toBeDefined();\n      \n      // Verify Supabase mock is working\n      expect(supabaseMock.from).toBeDefined();\n      expect(supabaseMock.insert).toBeDefined();\n      \n      // Verify Redis mock is working\n      expect(redisMock.get).toBeDefined();\n      expect(redisMock.set).toBeDefined();\n    });\n\n    it('should handle API failures gracefully', async () => {\n      // Mock API failure\n      openaiMock.chat.completions.create.mockRejectedValue(new Error('API unavailable'));\n\n      const testHTML = TestDataGenerator.generateEcommerceHTML(1);\n      const testURL = 'https://api-failure-test.com';\n\n      // Should still work without API\n      const optimizedContent = await AIContentExtractor.extractOptimized(testHTML, testURL);\n      expect(optimizedContent).toBeDefined();\n    });\n  });\n\n  describe('10. Template Detection and Pattern Matching', () => {\n    it('should detect template patterns across similar pages', async () => {\n      const templateHTMLs = Array.from({ length: 3 }, (_, i) => \n        TestDataGenerator.generateTemplateVariationHTML(i)\n      );\n\n      const contents = templateHTMLs.map((html, i) => ({\n        content: html,\n        url: `https://template-test.com/product${i + 1}`\n      }));\n\n      const result = await deduplicator.batchProcess(contents, {\n        similarityThreshold: 0.7,\n        enableCompression: true,\n        batchSize: 10,\n        useRedis: false,\n        detectTemplates: true\n      });\n\n      expect(result.hashes).toHaveLength(3);\n      expect(result.patterns).toBeDefined();\n      \n      if (result.patterns.length > 0) {\n        const pattern = result.patterns[0];\n        expect(pattern.frequency).toBeGreaterThan(1);\n        expect(pattern.variations.length).toBeGreaterThan(1);\n      }\n    });\n\n    it('should generate accurate deduplication metrics', async () => {\n      // Add some duplicate content\n      const duplicateContent = 'This is duplicate content that appears on multiple pages.';\n      \n      await deduplicator.processContent(duplicateContent, 'https://page1.com');\n      await deduplicator.processContent(duplicateContent, 'https://page2.com');\n      await deduplicator.processContent('Unique content', 'https://page3.com');\n\n      const metrics = await deduplicator.generateMetrics();\n\n      expect(metrics.totalPages).toBe(3);\n      expect(metrics.duplicateContent).toBeGreaterThan(0);\n      expect(metrics.uniqueContent).toBeGreaterThan(0);\n      expect(metrics.storageReduction).toBeGreaterThanOrEqual(0);\n\n      console.log('Deduplication metrics:', metrics);\n    });\n  });\n});"],"names":["TestDataGenerator","generateEcommerceHTML","productCount","products","Array","from","length","_","i","toFixed","String","padStart","join","generateTemplateVariationHTML","variation","productNames","prices","skus","toLowerCase","generateLargeContentHTML","sections","MockUtilities","createSupabaseMock","jest","fn","mockReturnThis","select","insert","update","upsert","delete","eq","single","limit","order","createRedisMock","storage","Map","sets","get","key","Promise","resolve","set","value","setex","ttl","del","existed","has","sadd","values","Set","added","forEach","add","smembers","srem","removed","flushall","clear","eval","hmget","hmset","hincrby","expire","quit","on","createOpenAIMock","chat","completions","create","mockResolvedValue","choices","message","content","JSON","stringify","summary","keyFacts","topicTags","embeddings","data","embedding","fill","PerformanceMonitor","start","startTime","Date","now","checkpoints","checkpoint","name","elapsed","getResults","totalTime","time","entries","MemoryTracker","initialMemory","process","memoryUsage","getCurrentUsage","current","heapUsed","Math","round","heapTotal","external","rss","heapUsedDelta","TestHelpers","sleep","ms","setTimeout","validateSemanticChunks","chunks","expect","toBeDefined","isArray","toBe","chunk","toHaveProperty","tokens","toBeGreaterThan","relevanceScore","toBeGreaterThanOrEqual","toBeLessThanOrEqual","validateAIOptimizedContent","originalTokens","optimizedTokens","compressionRatio","qaPairs","validateNormalizedProduct","product","price","amount","describe","supabaseMock","redisMock","openaiMock","rateLimiter","deduplicator","performanceMonitor","memoryTracker","beforeAll","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","REDIS_URL","beforeEach","clearAllMocks","doMock","createClient","EnhancedRateLimiter","RateLimiterPresets","moderate","ContentDeduplicator","AIContentExtractor","clearCache","afterEach","close","restoreAllMocks","it","testHTML","testURL","optimizedContent","extractOptimized","extractor","EcommerceExtractor","extractProducts","url","contentHash","processContent","similarityThreshold","enableCompression","batchSize","useRedis","detectTemplates","toBeTruthy","PatternLearner","learnFromExtraction","platform","selectors","sku","extractionMethod","results","toBeLessThan","console","log","productsExtracted","processingStats","removedElements","some","c","type","mockResolvedValueOnce","error","firstProducts","toHaveBeenCalledWith","objectContaining","domain","patterns","arrayContaining","fieldType","confidence","any","Number","mockPatterns","selector","lastUpdated","toISOString","successRate","totalExtractions","getPatterns","toEqual","every","p","existingPatterns","updatePatternSuccess","requests","push","checkRateLimit","responses","all","allowedCount","filter","r","allowed","rateLimitedCount","rateLimitedResponses","response","waitTimeMs","resetTime","reportRequestResult","timestamp","responseTime","statusCode","success","retryCount","reason","fastConfig","getCrawlerConfig","carefulConfig","ecommerceConfig","maxConcurrency","timeouts","request","extractImages","minWordCount","originalConcurrency","CRAWLER_MAX_CONCURRENCY","config","undefined","standardConfig","getAIOptimizationConfig","qualityConfig","enabled","level","tokenTarget","preserveContent","rateCheckResponse","min","dedupHash","finalResults","performance","memory","optimizationRatio","productsFound","chunksCreated","toContain","formatted","chunkTypes","map","hash","retrievedContent","getContent","toBeInstanceOf","compressionTime","existingData","metadata","title","description","report","originalSize","optimizedSize","tokensSaved","processingTime","existingDataBatch","optimizationResults","item","optimized","result","totalTokensSaved","reduce","sum","averageCompressionRatio","itemsProcessed","malformedHTML","emptyHTML","mockRejectedValue","Error","scrapedAt","resolves","toBeUndefined","largeHTML","html","finalMemory","memoryIncrease","concurrentTasks","tasksCount","averageTime","templateHTMLs","contents","batchProcess","hashes","toHaveLength","pattern","frequency","variations","duplicateContent","metrics","generateMetrics","totalPages","uniqueContent","storageReduction"],"mappings":"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"}