a3803c347cc16105668e2c18e7db56df
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _aicontentextractor = require("../../lib/ai-content-extractor");
const _patternlearner = require("../../lib/pattern-learner");
const _ratelimiterenhanced = require("../../lib/rate-limiter-enhanced");
const _contentdeduplicator = require("../../lib/content-deduplicator");
const _crawlerconfig = require("../../lib/crawler-config");
const _ecommerceextractor = require("../../lib/ecommerce-extractor");
// Test Data Generators and Fixtures
class TestDataGenerator {
    static generateEcommerceHTML(productCount = 1) {
        const products = Array.from({
            length: productCount
        }, (_, i)=>`
      <div class="product" itemscope itemtype="https://schema.org/Product">
        <h1 itemprop="name" class="product-title">Amazing Product ${i + 1}</h1>
        <div class="price-container">
          <span class="price" itemprop="price">£${(29.99 + i * 10).toFixed(2)}</span>
          <meta itemprop="priceCurrency" content="GBP" />
        </div>
        <div class="sku" itemprop="sku">PROD-${String(i + 1).padStart(3, '0')}</div>
        <div class="description" itemprop="description">
          This is an amazing product with great features. 
          It offers excellent value for money and comes with a warranty.
          Perfect for customers who want quality and reliability.
        </div>
        <div class="availability" itemprop="availability" content="https://schema.org/InStock">
          In Stock
        </div>
        <img src="/images/product${i + 1}.jpg" alt="Product ${i + 1}" itemprop="image" />
      </div>
    `).join('\n');
        return `
      <!DOCTYPE html>
      <html>
      <head>
        <title>E-commerce Test Store</title>
        <meta name="description" content="Test store with amazing products" />
      </head>
      <body>
        <header class="site-header">
          <nav class="navigation">
            <ul>
              <li><a href="/">Home</a></li>
              <li><a href="/products">Products</a></li>
              <li><a href="/about">About</a></li>
              <li><a href="/contact">Contact</a></li>
            </ul>
          </nav>
        </header>
        
        <main class="main-content">
          <h1>Our Products</h1>
          <div class="products-grid">
            ${products}
          </div>
        </main>
        
        <footer class="site-footer">
          <p>&copy; 2024 Test Store. All rights reserved.</p>
          <p>Contact us: info@teststore.com | Phone: +44 123 456 7890</p>
          <div class="footer-links">
            <a href="/privacy">Privacy Policy</a>
            <a href="/terms">Terms of Service</a>
            <a href="/shipping">Shipping Info</a>
          </div>
        </footer>
      </body>
      </html>
    `;
    }
    static generateTemplateVariationHTML(variation) {
        const productNames = [
            'Laptop',
            'Smartphone',
            'Tablet',
            'Headphones',
            'Camera'
        ];
        const prices = [
            999,
            599,
            399,
            199,
            1299
        ];
        const skus = [
            'LAP-001',
            'PHN-002',
            'TAB-003',
            'HDP-004',
            'CAM-005'
        ];
        return `
      <div class="product-card">
        <h2>${productNames[variation]}</h2>
        <div class="price-info">
          <span class="current-price">£${prices[variation]}</span>
          <span class="currency">GBP</span>
        </div>
        <div class="product-code">${skus[variation]}</div>
        <div class="stock-status">Available</div>
        <p class="product-summary">
          High-quality ${productNames[variation].toLowerCase()} with premium features.
          Excellent build quality and customer satisfaction guaranteed.
          Perfect for ${variation % 2 === 0 ? 'professionals' : 'consumers'}.
        </p>
      </div>
    `;
    }
    static generateLargeContentHTML() {
        const sections = Array.from({
            length: 50
        }, (_, i)=>`
      <section class="content-section">
        <h2>Section ${i + 1}</h2>
        <p>This is a large content section with lots of text. ${Array.from({
                length: 100
            }, ()=>'Lorem ipsum dolor sit amet, consectetur adipiscing elit.').join(' ')}</p>
      </section>
    `).join('\n');
        return `
      <html>
        <body>
          <div class="large-content">
            ${sections}
          </div>
        </body>
      </html>
    `;
    }
}
// Mock Utilities
class MockUtilities {
    static createSupabaseMock() {
        return {
            from: _globals.jest.fn().mockReturnThis(),
            select: _globals.jest.fn().mockReturnThis(),
            insert: _globals.jest.fn().mockReturnThis(),
            update: _globals.jest.fn().mockReturnThis(),
            upsert: _globals.jest.fn().mockReturnThis(),
            delete: _globals.jest.fn().mockReturnThis(),
            eq: _globals.jest.fn().mockReturnThis(),
            single: _globals.jest.fn(),
            limit: _globals.jest.fn().mockReturnThis(),
            order: _globals.jest.fn().mockReturnThis()
        };
    }
    static createRedisMock() {
        const storage = new Map();
        const sets = new Map();
        return {
            get: _globals.jest.fn((key)=>Promise.resolve(storage.get(key) || null)),
            set: _globals.jest.fn((key, value)=>{
                storage.set(key, value);
                return Promise.resolve('OK');
            }),
            setex: _globals.jest.fn((key, ttl, value)=>{
                storage.set(key, value);
                return Promise.resolve('OK');
            }),
            del: _globals.jest.fn((key)=>{
                const existed = storage.has(key);
                storage.delete(key);
                return Promise.resolve(existed ? 1 : 0);
            }),
            sadd: _globals.jest.fn((key, ...values)=>{
                if (!sets.has(key)) sets.set(key, new Set());
                const set = sets.get(key);
                let added = 0;
                values.forEach((value)=>{
                    if (!set.has(value)) {
                        set.add(value);
                        added++;
                    }
                });
                return Promise.resolve(added);
            }),
            smembers: _globals.jest.fn((key)=>{
                const set = sets.get(key);
                return Promise.resolve(set ? Array.from(set) : []);
            }),
            srem: _globals.jest.fn((key, ...values)=>{
                const set = sets.get(key);
                if (!set) return Promise.resolve(0);
                let removed = 0;
                values.forEach((value)=>{
                    if (set.delete(value)) removed++;
                });
                return Promise.resolve(removed);
            }),
            flushall: _globals.jest.fn(()=>{
                storage.clear();
                sets.clear();
                return Promise.resolve('OK');
            }),
            eval: _globals.jest.fn(),
            hmget: _globals.jest.fn(),
            hmset: _globals.jest.fn(),
            hincrby: _globals.jest.fn(),
            expire: _globals.jest.fn(),
            quit: _globals.jest.fn(()=>Promise.resolve()),
            on: _globals.jest.fn()
        };
    }
    static createOpenAIMock() {
        return {
            chat: {
                completions: {
                    create: _globals.jest.fn().mockResolvedValue({
                        choices: [
                            {
                                message: {
                                    content: JSON.stringify({
                                        summary: "Test AI-generated summary",
                                        keyFacts: [
                                            "Fact 1",
                                            "Fact 2",
                                            "Fact 3"
                                        ],
                                        topicTags: [
                                            "tag1",
                                            "tag2",
                                            "tag3"
                                        ]
                                    })
                                }
                            }
                        ]
                    })
                }
            },
            embeddings: {
                create: _globals.jest.fn().mockResolvedValue({
                    data: [
                        {
                            embedding: Array(1536).fill(0.1)
                        }
                    ]
                })
            }
        };
    }
}
// Performance Monitoring Utilities
class PerformanceMonitor {
    start() {
        this.startTime = Date.now();
        this.checkpoints.clear();
    }
    checkpoint(name) {
        const now = Date.now();
        const elapsed = now - this.startTime;
        this.checkpoints.set(name, elapsed);
        return elapsed;
    }
    getResults() {
        const totalTime = Date.now() - this.startTime;
        const checkpoints = {};
        for (const [name, time] of this.checkpoints.entries()){
            checkpoints[name] = time;
        }
        return {
            totalTime,
            checkpoints
        };
    }
    constructor(){
        this.startTime = 0;
        this.checkpoints = new Map();
    }
}
// Memory Usage Utilities
class MemoryTracker {
    constructor(){
        this.initialMemory = process.memoryUsage();
    }
    getCurrentUsage() {
        const current = process.memoryUsage();
        return {
            heapUsed: Math.round(current.heapUsed / 1024 / 1024),
            heapTotal: Math.round(current.heapTotal / 1024 / 1024),
            external: Math.round(current.external / 1024 / 1024),
            rss: Math.round(current.rss / 1024 / 1024),
            heapUsedDelta: Math.round((current.heapUsed - this.initialMemory.heapUsed) / 1024 / 1024)
        };
    }
}
// Test Helper Functions
const TestHelpers = {
    async sleep (ms) {
        return new Promise((resolve)=>setTimeout(resolve, ms));
    },
    validateSemanticChunks (chunks) {
        (0, _globals.expect)(chunks).toBeDefined();
        (0, _globals.expect)(Array.isArray(chunks)).toBe(true);
        chunks.forEach((chunk)=>{
            (0, _globals.expect)(chunk).toHaveProperty('id');
            (0, _globals.expect)(chunk).toHaveProperty('type');
            (0, _globals.expect)(chunk).toHaveProperty('content');
            (0, _globals.expect)(chunk).toHaveProperty('tokens');
            (0, _globals.expect)(chunk).toHaveProperty('relevanceScore');
            (0, _globals.expect)(chunk).toHaveProperty('metadata');
            (0, _globals.expect)(chunk.tokens).toBeGreaterThan(0);
            (0, _globals.expect)(chunk.relevanceScore).toBeGreaterThanOrEqual(0);
            (0, _globals.expect)(chunk.relevanceScore).toBeLessThanOrEqual(1);
        });
    },
    validateAIOptimizedContent (content) {
        (0, _globals.expect)(content).toHaveProperty('originalTokens');
        (0, _globals.expect)(content).toHaveProperty('optimizedTokens');
        (0, _globals.expect)(content).toHaveProperty('compressionRatio');
        (0, _globals.expect)(content).toHaveProperty('chunks');
        (0, _globals.expect)(content).toHaveProperty('summary');
        (0, _globals.expect)(content).toHaveProperty('keyFacts');
        (0, _globals.expect)(content).toHaveProperty('qaPairs');
        (0, _globals.expect)(content).toHaveProperty('topicTags');
        (0, _globals.expect)(content).toHaveProperty('processingStats');
        (0, _globals.expect)(content.originalTokens).toBeGreaterThanOrEqual(content.optimizedTokens);
        (0, _globals.expect)(content.compressionRatio).toBeGreaterThanOrEqual(0);
        (0, _globals.expect)(Array.isArray(content.chunks)).toBe(true);
        (0, _globals.expect)(Array.isArray(content.keyFacts)).toBe(true);
        (0, _globals.expect)(Array.isArray(content.qaPairs)).toBe(true);
        (0, _globals.expect)(Array.isArray(content.topicTags)).toBe(true);
    },
    validateNormalizedProduct (product) {
        (0, _globals.expect)(product).toHaveProperty('name');
        (0, _globals.expect)(product).toHaveProperty('scrapedAt');
        (0, _globals.expect)(typeof product.name).toBe('string');
        (0, _globals.expect)(product.name.length).toBeGreaterThan(0);
        if (product.price) {
            (0, _globals.expect)(product.price).toHaveProperty('amount');
            (0, _globals.expect)(product.price).toHaveProperty('currency');
            (0, _globals.expect)(product.price).toHaveProperty('formatted');
            (0, _globals.expect)(typeof product.price.amount).toBe('number');
            (0, _globals.expect)(product.price.amount).toBeGreaterThan(0);
        }
    }
};
// Main Integration Tests
(0, _globals.describe)('Enhanced Scraper System Integration Tests', ()=>{
    let supabaseMock;
    let redisMock;
    let openaiMock;
    let rateLimiter;
    let deduplicator;
    let performanceMonitor;
    let memoryTracker;
    (0, _globals.beforeAll)(()=>{
        // Set environment variables for testing
        process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';
        process.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-key';
        process.env.REDIS_URL = 'redis://localhost:6379';
    });
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
        // Initialize mocks
        supabaseMock = MockUtilities.createSupabaseMock();
        redisMock = MockUtilities.createRedisMock();
        openaiMock = MockUtilities.createOpenAIMock();
        // Mock external libraries
        _globals.jest.doMock('@supabase/supabase-js', ()=>({
                createClient: _globals.jest.fn(()=>supabaseMock)
            }));
        _globals.jest.doMock('ioredis', ()=>{
            return _globals.jest.fn(()=>redisMock);
        });
        _globals.jest.doMock('openai', ()=>{
            return _globals.jest.fn(()=>openaiMock);
        });
        // Initialize system components
        rateLimiter = new _ratelimiterenhanced.EnhancedRateLimiter(_ratelimiterenhanced.RateLimiterPresets.moderate);
        deduplicator = new _contentdeduplicator.ContentDeduplicator();
        performanceMonitor = new PerformanceMonitor();
        memoryTracker = new MemoryTracker();
        // Clear AI content extractor cache
        _aicontentextractor.AIContentExtractor.clearCache();
    });
    (0, _globals.afterEach)(async ()=>{
        await rateLimiter.close();
        await deduplicator.clearCache();
        _globals.jest.restoreAllMocks();
    });
    (0, _globals.describe)('1. E-commerce Scraping with AI Optimization', ()=>{
        (0, _globals.it)('should complete full e-commerce extraction pipeline', async ()=>{
            performanceMonitor.start();
            // Generate test e-commerce HTML
            const testHTML = TestDataGenerator.generateEcommerceHTML(3);
            const testURL = 'https://teststore.com/products';
            performanceMonitor.checkpoint('html-generated');
            // Step 1: AI Content Optimization
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(testHTML, testURL);
            TestHelpers.validateAIOptimizedContent(optimizedContent);
            (0, _globals.expect)(optimizedContent.compressionRatio).toBeGreaterThan(0.1);
            (0, _globals.expect)(optimizedContent.chunks.length).toBeGreaterThan(0);
            performanceMonitor.checkpoint('ai-optimization-complete');
            // Step 2: E-commerce Extraction
            const extractor = new _ecommerceextractor.EcommerceExtractor();
            const products = await extractor.extractProducts(testHTML, {
                url: testURL
            });
            (0, _globals.expect)(products.length).toBe(3);
            products.forEach(TestHelpers.validateNormalizedProduct);
            performanceMonitor.checkpoint('ecommerce-extraction-complete');
            // Step 3: Content Deduplication
            const contentHash = await deduplicator.processContent(optimizedContent.content, testURL, {
                similarityThreshold: 0.8,
                enableCompression: true,
                batchSize: 100,
                useRedis: false,
                detectTemplates: true
            });
            (0, _globals.expect)(contentHash).toBeTruthy();
            (0, _globals.expect)(typeof contentHash).toBe('string');
            performanceMonitor.checkpoint('deduplication-complete');
            // Step 4: Pattern Learning
            await _patternlearner.PatternLearner.learnFromExtraction(testURL, products, {
                platform: 'custom',
                selectors: {
                    name: '.product-title',
                    price: '.price',
                    sku: '.sku'
                },
                extractionMethod: 'dom'
            });
            performanceMonitor.checkpoint('pattern-learning-complete');
            // Validate final results
            const results = performanceMonitor.getResults();
            const memoryUsage = memoryTracker.getCurrentUsage();
            (0, _globals.expect)(results.totalTime).toBeLessThan(30000); // Should complete within 30 seconds
            (0, _globals.expect)(memoryUsage.heapUsedDelta).toBeLessThan(100); // Should not use more than 100MB extra
            console.log('E-commerce pipeline performance:', {
                totalTime: results.totalTime,
                checkpoints: results.checkpoints,
                memoryUsage: memoryUsage,
                compressionRatio: optimizedContent.compressionRatio,
                productsExtracted: products.length
            });
        });
        (0, _globals.it)('should handle token reduction effectively', async ()=>{
            const testHTML = TestDataGenerator.generateLargeContentHTML();
            const testURL = 'https://large-content.com/page';
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(testHTML, testURL);
            // Verify significant token reduction
            (0, _globals.expect)(optimizedContent.compressionRatio).toBeGreaterThan(0.3);
            (0, _globals.expect)(optimizedContent.optimizedTokens).toBeLessThan(optimizedContent.originalTokens);
            (0, _globals.expect)(optimizedContent.processingStats.removedElements).toBeGreaterThan(0);
            // Verify semantic chunks are created
            TestHelpers.validateSemanticChunks(optimizedContent.chunks);
            (0, _globals.expect)(optimizedContent.chunks.some((c)=>c.type === 'main')).toBe(true);
            // Verify metadata generation
            (0, _globals.expect)(optimizedContent.summary.length).toBeGreaterThan(10);
            (0, _globals.expect)(optimizedContent.keyFacts.length).toBeGreaterThanOrEqual(0);
            (0, _globals.expect)(optimizedContent.topicTags.length).toBeGreaterThanOrEqual(0);
        });
    });
    (0, _globals.describe)('2. Pattern Learning Flow', ()=>{
        (0, _globals.it)('should learn and apply patterns effectively', async ()=>{
            const testURL = 'https://pattern-test.com/product';
            const testHTML = TestDataGenerator.generateEcommerceHTML(1);
            // Mock existing patterns
            supabaseMock.single.mockResolvedValueOnce({
                data: null,
                error: null
            });
            supabaseMock.insert.mockResolvedValue({
                data: {},
                error: null
            });
            // Step 1: First scrape learns patterns
            const extractor = new _ecommerceextractor.EcommerceExtractor();
            const firstProducts = await extractor.extractProducts(testHTML, {
                url: testURL
            });
            await _patternlearner.PatternLearner.learnFromExtraction(testURL, firstProducts, {
                platform: 'test-platform',
                selectors: {
                    name: '.product-title',
                    price: '.price'
                },
                extractionMethod: 'dom'
            });
            (0, _globals.expect)(supabaseMock.insert).toHaveBeenCalledWith(_globals.expect.objectContaining({
                domain: 'pattern-test.com',
                platform: 'test-platform',
                patterns: _globals.expect.arrayContaining([
                    _globals.expect.objectContaining({
                        fieldType: 'name',
                        confidence: _globals.expect.any(Number)
                    })
                ])
            }));
            // Step 2: Second scrape uses learned patterns
            const mockPatterns = {
                domain: 'pattern-test.com',
                platform: 'test-platform',
                patterns: [
                    {
                        selector: '.product-title',
                        fieldType: 'name',
                        confidence: 0.95,
                        extractionMethod: 'dom'
                    },
                    {
                        selector: '.price',
                        fieldType: 'price',
                        confidence: 0.90,
                        extractionMethod: 'dom'
                    }
                ],
                lastUpdated: new Date().toISOString(),
                successRate: 0.95,
                totalExtractions: 5
            };
            supabaseMock.single.mockResolvedValue({
                data: mockPatterns,
                error: null
            });
            const patterns = await _patternlearner.PatternLearner.getPatterns(testURL);
            (0, _globals.expect)(patterns).toEqual(mockPatterns);
            (0, _globals.expect)(patterns.successRate).toBe(0.95);
            (0, _globals.expect)(patterns.patterns.length).toBe(2);
            // Step 3: Verify performance improvement
            (0, _globals.expect)(patterns.patterns.every((p)=>p.confidence >= 0.9)).toBe(true);
        });
        (0, _globals.it)('should update pattern confidence over time', async ()=>{
            const testURL = 'https://confidence-test.com/product';
            const existingPatterns = {
                domain: 'confidence-test.com',
                patterns: [
                    {
                        selector: '.product-name',
                        fieldType: 'name',
                        confidence: 0.7,
                        extractionMethod: 'dom'
                    }
                ],
                lastUpdated: new Date().toISOString(),
                successRate: 0.8,
                totalExtractions: 10
            };
            supabaseMock.single.mockResolvedValue({
                data: existingPatterns,
                error: null
            });
            supabaseMock.update.mockResolvedValue({
                data: {},
                error: null
            });
            // Simulate successful pattern usage
            await _patternlearner.PatternLearner.updatePatternSuccess(testURL, true, [
                'name:.product-name'
            ]);
            (0, _globals.expect)(supabaseMock.update).toHaveBeenCalledWith(_globals.expect.objectContaining({
                totalExtractions: 11,
                successRate: _globals.expect.any(Number)
            }));
        });
    });
    (0, _globals.describe)('3. Rate Limiting Integration', ()=>{
        (0, _globals.it)('should handle multiple rapid requests with proper throttling', async ()=>{
            const domain = 'rate-limit-test.com';
            const requests = [];
            // Create 10 rapid requests
            for(let i = 0; i < 10; i++){
                requests.push(rateLimiter.checkRateLimit(domain));
            }
            const responses = await Promise.all(requests);
            // Some requests should be allowed, others should be rate limited
            const allowedCount = responses.filter((r)=>r.allowed).length;
            const rateLimitedCount = responses.filter((r)=>!r.allowed).length;
            (0, _globals.expect)(allowedCount).toBeGreaterThan(0);
            (0, _globals.expect)(rateLimitedCount).toBeGreaterThan(0);
            (0, _globals.expect)(allowedCount + rateLimitedCount).toBe(10);
            // Wait time should be provided for rate-limited requests
            const rateLimitedResponses = responses.filter((r)=>!r.allowed);
            rateLimitedResponses.forEach((response)=>{
                (0, _globals.expect)(response.waitTimeMs).toBeGreaterThan(0);
                (0, _globals.expect)(response.resetTime).toBeGreaterThan(Date.now());
            });
        });
        (0, _globals.it)('should apply exponential backoff on 429 responses', async ()=>{
            const domain = 'backoff-test.com';
            // Simulate 429 responses
            for(let i = 0; i < 3; i++){
                await rateLimiter.reportRequestResult({
                    domain,
                    timestamp: Date.now(),
                    responseTime: 1000,
                    statusCode: 429,
                    success: false,
                    retryCount: i
                });
            }
            // Check rate limit after failures
            const response = await rateLimiter.checkRateLimit(domain, {
                retryCount: 3
            });
            if (!response.allowed) {
                // Should have increased wait time due to backoff
                (0, _globals.expect)(response.waitTimeMs).toBeGreaterThan(1000);
            }
        });
        (0, _globals.it)('should trigger circuit breaker after consecutive failures', async ()=>{
            const domain = 'circuit-breaker-test.com';
            // Simulate multiple failures to trigger circuit breaker
            for(let i = 0; i < 6; i++){
                await rateLimiter.reportRequestResult({
                    domain,
                    timestamp: Date.now(),
                    responseTime: 5000,
                    statusCode: 503,
                    success: false,
                    retryCount: 0
                });
            }
            // Circuit breaker should now be open
            const response = await rateLimiter.checkRateLimit(domain);
            (0, _globals.expect)(response.allowed).toBe(false);
            (0, _globals.expect)(response.reason).toBe('Circuit breaker open');
            (0, _globals.expect)(response.waitTimeMs).toBeGreaterThan(0);
        });
    });
    (0, _globals.describe)('4. Configuration Management', ()=>{
        (0, _globals.it)('should load different presets correctly', async ()=>{
            const fastConfig = (0, _crawlerconfig.getCrawlerConfig)('fast');
            const carefulConfig = (0, _crawlerconfig.getCrawlerConfig)('careful');
            const ecommerceConfig = (0, _crawlerconfig.getCrawlerConfig)('ecommerce');
            // Verify different concurrency settings
            (0, _globals.expect)(fastConfig.maxConcurrency).toBeGreaterThan(carefulConfig.maxConcurrency);
            (0, _globals.expect)(fastConfig.timeouts.request).toBeLessThan(carefulConfig.timeouts.request);
            // Verify e-commerce specific settings
            (0, _globals.expect)(ecommerceConfig.content.extractImages).toBe(true);
            (0, _globals.expect)(ecommerceConfig.content.minWordCount).toBeLessThan(fastConfig.content.minWordCount);
        });
        (0, _globals.it)('should apply runtime overrides correctly', async ()=>{
            // Test environment variable overrides
            const originalConcurrency = process.env.CRAWLER_MAX_CONCURRENCY;
            process.env.CRAWLER_MAX_CONCURRENCY = '15';
            const config = (0, _crawlerconfig.getCrawlerConfig)('fast');
            (0, _globals.expect)(config.maxConcurrency).toBe(15);
            // Restore original value
            if (originalConcurrency !== undefined) {
                process.env.CRAWLER_MAX_CONCURRENCY = originalConcurrency;
            } else {
                delete process.env.CRAWLER_MAX_CONCURRENCY;
            }
        });
        (0, _globals.it)('should provide AI optimization configurations', async ()=>{
            const standardConfig = (0, _crawlerconfig.getAIOptimizationConfig)('standard');
            const qualityConfig = (0, _crawlerconfig.getAIOptimizationConfig)('quality');
            (0, _globals.expect)(standardConfig.enabled).toBe(true);
            (0, _globals.expect)(standardConfig.level).toBe('standard');
            (0, _globals.expect)(standardConfig.tokenTarget).toBe(2000);
            (0, _globals.expect)(qualityConfig.tokenTarget).toBeGreaterThan(standardConfig.tokenTarget);
            (0, _globals.expect)(qualityConfig.preserveContent.length).toBeGreaterThan(standardConfig.preserveContent.length);
        });
    });
    (0, _globals.describe)('5. Complete Pipeline Test', ()=>{
        (0, _globals.it)('should process complete scraping workflow', async ()=>{
            performanceMonitor.start();
            const testURL = 'https://complete-test.com/products';
            const testHTML = TestDataGenerator.generateEcommerceHTML(2);
            // Step 1: Rate limiting check
            const rateCheckResponse = await rateLimiter.checkRateLimit('complete-test.com');
            if (rateCheckResponse.waitTimeMs > 0) {
                await TestHelpers.sleep(Math.min(rateCheckResponse.waitTimeMs, 100));
            }
            (0, _globals.expect)(rateCheckResponse.allowed).toBe(true);
            performanceMonitor.checkpoint('rate-limit-check');
            // Step 2: AI Content Optimization
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(testHTML, testURL);
            (0, _globals.expect)(optimizedContent.compressionRatio).toBeGreaterThan(0);
            performanceMonitor.checkpoint('ai-optimization');
            // Step 3: E-commerce Product Extraction
            const extractor = new _ecommerceextractor.EcommerceExtractor();
            const products = await extractor.extractProducts(testHTML, {
                url: testURL
            });
            (0, _globals.expect)(products.length).toBe(2);
            performanceMonitor.checkpoint('product-extraction');
            // Step 4: Content Deduplication
            const dedupHash = await deduplicator.processContent(optimizedContent.content, testURL);
            (0, _globals.expect)(dedupHash).toBeTruthy();
            performanceMonitor.checkpoint('deduplication');
            // Step 5: Metadata Generation
            (0, _globals.expect)(optimizedContent.summary.length).toBeGreaterThan(0);
            (0, _globals.expect)(optimizedContent.keyFacts.length).toBeGreaterThanOrEqual(0);
            (0, _globals.expect)(optimizedContent.topicTags.length).toBeGreaterThanOrEqual(0);
            performanceMonitor.checkpoint('metadata-generation');
            // Step 6: Pattern Learning
            await _patternlearner.PatternLearner.learnFromExtraction(testURL, products, {
                platform: 'test',
                selectors: {
                    name: '.product-title',
                    price: '.price'
                },
                extractionMethod: 'dom'
            });
            performanceMonitor.checkpoint('pattern-learning');
            // Step 7: Report request success
            await rateLimiter.reportRequestResult({
                domain: 'complete-test.com',
                timestamp: Date.now(),
                responseTime: 2000,
                statusCode: 200,
                success: true,
                retryCount: 0
            });
            performanceMonitor.checkpoint('request-reporting');
            // Validate final pipeline output
            const finalResults = performanceMonitor.getResults();
            const memoryUsage = memoryTracker.getCurrentUsage();
            (0, _globals.expect)(finalResults.totalTime).toBeLessThan(15000); // Complete within 15 seconds
            (0, _globals.expect)(memoryUsage.heapUsedDelta).toBeLessThan(50); // Memory efficient
            console.log('Complete pipeline results:', {
                performance: finalResults,
                memory: memoryUsage,
                optimizationRatio: optimizedContent.compressionRatio,
                productsFound: products.length,
                chunksCreated: optimizedContent.chunks.length
            });
        });
        (0, _globals.it)('should handle data flow between components correctly', async ()=>{
            const testURL = 'https://dataflow-test.com/product';
            const testHTML = TestDataGenerator.generateEcommerceHTML(1);
            // Extract product data
            const extractor = new _ecommerceextractor.EcommerceExtractor();
            const products = await extractor.extractProducts(testHTML, {
                url: testURL
            });
            const product = products[0];
            // Verify product data structure
            TestHelpers.validateNormalizedProduct(product);
            // Extract optimized content
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(testHTML, testURL);
            // Verify content contains product information
            (0, _globals.expect)(optimizedContent.content.toLowerCase()).toContain(product.name.toLowerCase());
            if (product.price) {
                (0, _globals.expect)(optimizedContent.content).toContain(product.price.formatted);
            }
            // Verify chunk types are appropriate
            const chunkTypes = new Set(optimizedContent.chunks.map((c)=>c.type));
            (0, _globals.expect)(chunkTypes.has('main')).toBe(true);
            // Deduplicate content
            const hash = await deduplicator.processContent(optimizedContent.content, testURL);
            const retrievedContent = await deduplicator.getContent(hash);
            (0, _globals.expect)(retrievedContent).toBeTruthy();
            (0, _globals.expect)(retrievedContent).toContain(product.name);
        });
        (0, _globals.it)('should validate final output structure meets requirements', async ()=>{
            const testHTML = TestDataGenerator.generateEcommerceHTML(1);
            const testURL = 'https://output-validation.com/product';
            // Complete processing
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(testHTML, testURL);
            const extractor = new _ecommerceextractor.EcommerceExtractor();
            const products = await extractor.extractProducts(testHTML, {
                url: testURL
            });
            // Validate AI optimized content structure
            (0, _globals.expect)(optimizedContent).toHaveProperty('originalTokens');
            (0, _globals.expect)(optimizedContent).toHaveProperty('optimizedTokens');
            (0, _globals.expect)(optimizedContent).toHaveProperty('compressionRatio');
            (0, _globals.expect)(optimizedContent).toHaveProperty('chunks');
            (0, _globals.expect)(optimizedContent).toHaveProperty('summary');
            (0, _globals.expect)(optimizedContent).toHaveProperty('keyFacts');
            (0, _globals.expect)(optimizedContent).toHaveProperty('qaPairs');
            (0, _globals.expect)(optimizedContent).toHaveProperty('topicTags');
            (0, _globals.expect)(optimizedContent).toHaveProperty('processingStats');
            // Validate product structure
            (0, _globals.expect)(products).toBeInstanceOf(Array);
            (0, _globals.expect)(products.length).toBeGreaterThan(0);
            products.forEach((product)=>{
                (0, _globals.expect)(product).toHaveProperty('name');
                (0, _globals.expect)(product).toHaveProperty('scrapedAt');
                (0, _globals.expect)(typeof product.name).toBe('string');
                (0, _globals.expect)(product.name.length).toBeGreaterThan(0);
            });
            // Validate processing stats
            (0, _globals.expect)(optimizedContent.processingStats).toHaveProperty('removedElements');
            (0, _globals.expect)(optimizedContent.processingStats).toHaveProperty('deduplicatedSections');
            (0, _globals.expect)(optimizedContent.processingStats).toHaveProperty('compressionTime');
            (0, _globals.expect)(optimizedContent.processingStats.compressionTime).toBeGreaterThan(0);
        });
    });
    (0, _globals.describe)('6. Migration Tool Test', ()=>{
        (0, _globals.it)('should optimize existing scraped data', async ()=>{
            // Mock existing unoptimized data
            const existingData = {
                url: 'https://migration-test.com/product',
                content: TestDataGenerator.generateLargeContentHTML(),
                metadata: {
                    title: 'Test Product',
                    description: 'Test Description'
                }
            };
            // Run optimization migration
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(existingData.content, existingData.url);
            // Verify optimization occurred
            (0, _globals.expect)(optimizedContent.originalTokens).toBeGreaterThan(optimizedContent.optimizedTokens);
            (0, _globals.expect)(optimizedContent.compressionRatio).toBeGreaterThan(0.1);
            // Verify content preserved
            (0, _globals.expect)(optimizedContent.content).toBeTruthy();
            (0, _globals.expect)(optimizedContent.summary).toBeTruthy();
            // Generate migration report
            const report = {
                originalSize: optimizedContent.originalTokens,
                optimizedSize: optimizedContent.optimizedTokens,
                compressionRatio: optimizedContent.compressionRatio,
                tokensSaved: optimizedContent.originalTokens - optimizedContent.optimizedTokens,
                processingTime: optimizedContent.processingStats.compressionTime
            };
            (0, _globals.expect)(report.tokensSaved).toBeGreaterThan(0);
            (0, _globals.expect)(report.compressionRatio).toBeGreaterThan(0);
            console.log('Migration optimization report:', report);
        });
        (0, _globals.it)('should handle batch optimization of existing data', async ()=>{
            const existingDataBatch = [
                {
                    url: 'https://batch1.com',
                    content: TestDataGenerator.generateEcommerceHTML(1)
                },
                {
                    url: 'https://batch2.com',
                    content: TestDataGenerator.generateEcommerceHTML(1)
                },
                {
                    url: 'https://batch3.com',
                    content: TestDataGenerator.generateEcommerceHTML(1)
                }
            ];
            const optimizationResults = await Promise.all(existingDataBatch.map(async (item)=>{
                const optimized = await _aicontentextractor.AIContentExtractor.extractOptimized(item.content, item.url);
                return {
                    url: item.url,
                    originalTokens: optimized.originalTokens,
                    optimizedTokens: optimized.optimizedTokens,
                    compressionRatio: optimized.compressionRatio
                };
            }));
            // Verify all items were optimized
            (0, _globals.expect)(optimizationResults.length).toBe(3);
            optimizationResults.forEach((result)=>{
                (0, _globals.expect)(result.compressionRatio).toBeGreaterThan(0);
                (0, _globals.expect)(result.optimizedTokens).toBeLessThanOrEqual(result.originalTokens);
            });
            // Calculate batch statistics
            const totalTokensSaved = optimizationResults.reduce((sum, result)=>sum + (result.originalTokens - result.optimizedTokens), 0);
            const averageCompressionRatio = optimizationResults.reduce((sum, result)=>sum + result.compressionRatio, 0) / optimizationResults.length;
            (0, _globals.expect)(totalTokensSaved).toBeGreaterThan(0);
            (0, _globals.expect)(averageCompressionRatio).toBeGreaterThan(0);
            console.log('Batch migration results:', {
                itemsProcessed: optimizationResults.length,
                totalTokensSaved,
                averageCompressionRatio
            });
        });
    });
    (0, _globals.describe)('7. Error Scenarios and Edge Cases', ()=>{
        (0, _globals.it)('should handle malformed HTML gracefully', async ()=>{
            const malformedHTML = '<html><body><div>Unclosed div<p>Unclosed paragraph</body>';
            const testURL = 'https://malformed-test.com';
            // Should not throw errors
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(malformedHTML, testURL);
            (0, _globals.expect)(optimizedContent).toBeDefined();
            (0, _globals.expect)(optimizedContent.content).toBeTruthy();
        });
        (0, _globals.it)('should handle empty content', async ()=>{
            const emptyHTML = '<html><body></body></html>';
            const testURL = 'https://empty-test.com';
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(emptyHTML, testURL);
            (0, _globals.expect)(optimizedContent.originalTokens).toBe(0);
            (0, _globals.expect)(optimizedContent.optimizedTokens).toBe(0);
            (0, _globals.expect)(optimizedContent.chunks.length).toBe(0);
        });
        (0, _globals.it)('should handle network timeouts in rate limiter', async ()=>{
            const domain = 'timeout-test.com';
            // Simulate network timeout
            await rateLimiter.reportRequestResult({
                domain,
                timestamp: Date.now(),
                responseTime: 30000,
                statusCode: 0,
                success: false,
                retryCount: 0
            });
            const response = await rateLimiter.checkRateLimit(domain);
            (0, _globals.expect)(response).toBeDefined();
        });
        (0, _globals.it)('should handle database connection failures', async ()=>{
            // Mock database error
            supabaseMock.single.mockRejectedValue(new Error('Database connection failed'));
            const testURL = 'https://db-error-test.com/product';
            const products = [
                {
                    name: 'Test Product',
                    scrapedAt: new Date().toISOString()
                }
            ];
            // Should not throw error
            await (0, _globals.expect)(_patternlearner.PatternLearner.learnFromExtraction(testURL, products, {})).resolves.toBeUndefined();
        });
    });
    (0, _globals.describe)('8. Performance Benchmarks', ()=>{
        (0, _globals.it)('should meet performance benchmarks for large content', async ()=>{
            const largeHTML = TestDataGenerator.generateLargeContentHTML();
            const testURL = 'https://performance-test.com/large';
            const startTime = Date.now();
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(largeHTML, testURL);
            const processingTime = Date.now() - startTime;
            // Performance benchmarks
            (0, _globals.expect)(processingTime).toBeLessThan(10000); // Under 10 seconds
            (0, _globals.expect)(optimizedContent.compressionRatio).toBeGreaterThan(0.3); // At least 30% reduction
            (0, _globals.expect)(optimizedContent.processingStats.compressionTime).toBeLessThan(processingTime);
            console.log('Large content performance:', {
                processingTime,
                compressionRatio: optimizedContent.compressionRatio,
                originalTokens: optimizedContent.originalTokens,
                optimizedTokens: optimizedContent.optimizedTokens
            });
        });
        (0, _globals.it)('should maintain memory efficiency during processing', async ()=>{
            const initialMemory = memoryTracker.getCurrentUsage();
            // Process multiple items
            for(let i = 0; i < 5; i++){
                const html = TestDataGenerator.generateEcommerceHTML(2);
                const url = `https://memory-test-${i}.com/products`;
                await _aicontentextractor.AIContentExtractor.extractOptimized(html, url);
            }
            const finalMemory = memoryTracker.getCurrentUsage();
            const memoryIncrease = finalMemory.heapUsedDelta;
            // Memory should not increase dramatically
            (0, _globals.expect)(memoryIncrease).toBeLessThan(100); // Less than 100MB increase
            console.log('Memory efficiency test:', {
                initialMemory: initialMemory.heapUsed,
                finalMemory: finalMemory.heapUsed,
                memoryIncrease
            });
        });
        (0, _globals.it)('should handle concurrent processing efficiently', async ()=>{
            const concurrentTasks = Array.from({
                length: 5
            }, (_, i)=>{
                const html = TestDataGenerator.generateEcommerceHTML(1);
                const url = `https://concurrent-test-${i}.com/product`;
                return _aicontentextractor.AIContentExtractor.extractOptimized(html, url);
            });
            const startTime = Date.now();
            const results = await Promise.all(concurrentTasks);
            const totalTime = Date.now() - startTime;
            // Verify all tasks completed successfully
            (0, _globals.expect)(results.length).toBe(5);
            results.forEach((result)=>{
                (0, _globals.expect)(result.compressionRatio).toBeGreaterThan(0);
            });
            // Concurrent processing should be efficient
            (0, _globals.expect)(totalTime).toBeLessThan(15000); // Under 15 seconds for 5 concurrent tasks
            console.log('Concurrent processing test:', {
                tasksCount: results.length,
                totalTime,
                averageTime: totalTime / results.length,
                averageCompressionRatio: results.reduce((sum, r)=>sum + r.compressionRatio, 0) / results.length
            });
        });
    });
    (0, _globals.describe)('9. Integration with External Services', ()=>{
        (0, _globals.it)('should mock external API calls correctly', async ()=>{
            // Verify OpenAI mock is working
            (0, _globals.expect)(openaiMock.chat.completions.create).toBeDefined();
            // Verify Supabase mock is working
            (0, _globals.expect)(supabaseMock.from).toBeDefined();
            (0, _globals.expect)(supabaseMock.insert).toBeDefined();
            // Verify Redis mock is working
            (0, _globals.expect)(redisMock.get).toBeDefined();
            (0, _globals.expect)(redisMock.set).toBeDefined();
        });
        (0, _globals.it)('should handle API failures gracefully', async ()=>{
            // Mock API failure
            openaiMock.chat.completions.create.mockRejectedValue(new Error('API unavailable'));
            const testHTML = TestDataGenerator.generateEcommerceHTML(1);
            const testURL = 'https://api-failure-test.com';
            // Should still work without API
            const optimizedContent = await _aicontentextractor.AIContentExtractor.extractOptimized(testHTML, testURL);
            (0, _globals.expect)(optimizedContent).toBeDefined();
        });
    });
    (0, _globals.describe)('10. Template Detection and Pattern Matching', ()=>{
        (0, _globals.it)('should detect template patterns across similar pages', async ()=>{
            const templateHTMLs = Array.from({
                length: 3
            }, (_, i)=>TestDataGenerator.generateTemplateVariationHTML(i));
            const contents = templateHTMLs.map((html, i)=>({
                    content: html,
                    url: `https://template-test.com/product${i + 1}`
                }));
            const result = await deduplicator.batchProcess(contents, {
                similarityThreshold: 0.7,
                enableCompression: true,
                batchSize: 10,
                useRedis: false,
                detectTemplates: true
            });
            (0, _globals.expect)(result.hashes).toHaveLength(3);
            (0, _globals.expect)(result.patterns).toBeDefined();
            if (result.patterns.length > 0) {
                const pattern = result.patterns[0];
                (0, _globals.expect)(pattern.frequency).toBeGreaterThan(1);
                (0, _globals.expect)(pattern.variations.length).toBeGreaterThan(1);
            }
        });
        (0, _globals.it)('should generate accurate deduplication metrics', async ()=>{
            // Add some duplicate content
            const duplicateContent = 'This is duplicate content that appears on multiple pages.';
            await deduplicator.processContent(duplicateContent, 'https://page1.com');
            await deduplicator.processContent(duplicateContent, 'https://page2.com');
            await deduplicator.processContent('Unique content', 'https://page3.com');
            const metrics = await deduplicator.generateMetrics();
            (0, _globals.expect)(metrics.totalPages).toBe(3);
            (0, _globals.expect)(metrics.duplicateContent).toBeGreaterThan(0);
            (0, _globals.expect)(metrics.uniqueContent).toBeGreaterThan(0);
            (0, _globals.expect)(metrics.storageReduction).toBeGreaterThanOrEqual(0);
            console.log('Deduplication metrics:', metrics);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,