8baf0de38031b02bce03895f56949da3
/**
 * Integration Test Setup
 * Additional setup for integration tests specifically
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
// Set longer timeout for integration tests
_globals.jest.setTimeout(120000); // 2 minutes
// Mock console methods to reduce noise during tests
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
const originalConsoleLog = console.log;
beforeEach(()=>{
    // Reset console mocks before each test
    console.error = _globals.jest.fn();
    console.warn = _globals.jest.fn();
    console.log = _globals.jest.fn();
});
afterEach(()=>{
    // Restore console methods after each test
    console.error = originalConsoleError;
    console.warn = originalConsoleWarn;
    console.log = originalConsoleLog;
});
// Mock environment variables for consistent testing
process.env.NODE_ENV = 'test';
process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';
process.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-role-key';
process.env.REDIS_URL = 'redis://localhost:6379';
process.env.OPENAI_API_KEY = 'test-openai-key';
// Global test utilities
global.testUtils = {
    sleep: (ms)=>new Promise((resolve)=>setTimeout(resolve, ms)),
    waitFor: async (condition, timeout = 10000)=>{
        const start = Date.now();
        while(Date.now() - start < timeout){
            if (await condition()) return true;
            await global.testUtils.sleep(100);
        }
        throw new Error('Condition not met within timeout');
    },
    retry: async (fn, retries = 3, delay = 1000)=>{
        for(let i = 0; i < retries; i++){
            try {
                return await fn();
            } catch (error) {
                if (i === retries - 1) throw error;
                await global.testUtils.sleep(delay * Math.pow(2, i));
            }
        }
    }
};
// Mock external services that might cause issues in CI/CD
_globals.jest.mock('ioredis', ()=>{
    return _globals.jest.fn(()=>({
            get: _globals.jest.fn(),
            set: _globals.jest.fn(),
            del: _globals.jest.fn(),
            exists: _globals.jest.fn(),
            flushall: _globals.jest.fn(),
            quit: _globals.jest.fn(),
            on: _globals.jest.fn()
        }));
});
// Mock Supabase client
_globals.jest.mock('@supabase/supabase-js', ()=>({
        createClient: _globals.jest.fn(()=>({
                from: _globals.jest.fn().mockReturnThis(),
                select: _globals.jest.fn().mockReturnThis(),
                insert: _globals.jest.fn().mockReturnThis(),
                update: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: null,
                    error: null
                })
            }))
    }));
// Mock OpenAI client
_globals.jest.mock('openai', ()=>{
    return _globals.jest.fn(()=>({
            chat: {
                completions: {
                    create: _globals.jest.fn().mockResolvedValue({
                        choices: [
                            {
                                message: {
                                    content: 'Mock AI response'
                                }
                            }
                        ]
                    })
                }
            },
            embeddings: {
                create: _globals.jest.fn().mockResolvedValue({
                    data: [
                        {
                            embedding: Array(1536).fill(0.1)
                        }
                    ]
                })
            }
        }));
});
// Performance monitoring for integration tests
let performanceStart = Date.now();
beforeAll(()=>{
    performanceStart = Date.now();
    console.log('ðŸš€ Starting integration tests...');
});
afterAll(()=>{
    const duration = Date.now() - performanceStart;
    console.log(`âœ… Integration tests completed in ${duration}ms`);
    // Force cleanup of any remaining handles
    if (global.gc) {
        global.gc();
    }
});
// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise)=>{
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
// Handle uncaught exceptions
process.on('uncaughtException', (error)=>{
    console.error('Uncaught Exception:', error);
});

//# sourceMappingURL=data:application/json;base64,