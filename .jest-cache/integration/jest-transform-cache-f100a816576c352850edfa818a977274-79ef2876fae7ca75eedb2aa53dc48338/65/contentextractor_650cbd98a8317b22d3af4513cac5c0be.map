{"version":3,"sources":["/Users/jamesguy/Omniops/lib/content-extractor.ts"],"sourcesContent":["import { Readability } from '@mozilla/readability';\nimport { JSDOM } from 'jsdom';\nimport * as cheerio from 'cheerio';\nimport { createHash } from 'crypto';\n\n// We'll skip Turndown for now to avoid import issues - can use HTML directly\n// or convert to text without markdown formatting\n\n// Helper function to convert HTML to plain text\nfunction htmlToText(html: string): string {\n  const $ = cheerio.load(html);\n  \n  // Remove script and style elements\n  $('script, style, noscript').remove();\n  \n  // Preserve some structure\n  $('p, div, section, article').append('\\n\\n');\n  $('br').replaceWith('\\n');\n  \n  // Get text content\n  return $.text()\n    .replace(/\\n{3,}/g, '\\n\\n')  // Replace multiple newlines\n    .replace(/[ \\t]+/g, ' ')  // Replace multiple spaces/tabs\n    .trim();\n}\n\nexport interface ExtractedContent {\n  title: string;\n  content: string;\n  textContent: string; // Plain text for hashing\n  excerpt: string;\n  author?: string;\n  publishedDate?: string;\n  modifiedDate?: string;\n  lang: string;\n  images: Array<{ src: string; alt: string }>;\n  links: Array<{ href: string; text: string }>;\n  metadata: Record<string, any>;\n  contentHash: string;\n  wordCount: number;\n  readingTime: number; // in minutes\n}\n\nexport class ContentExtractor {\n  /**\n   * Extract content using Mozilla's Readability for better accuracy\n   */\n  static extractWithReadability(html: string, url: string): ExtractedContent {\n    // Create virtual DOM\n    const dom = new JSDOM(html, { url });\n    const document = dom.window.document;\n    \n    // Clone document for Readability (it modifies the DOM)\n    const documentClone = document.cloneNode(true) as Document;\n    \n    // Extract metadata before Readability modifies DOM\n    const metadata = this.extractMetadata(document);\n    const images = this.extractImages(document);\n    const links = this.extractLinks(document, url);\n    \n    // Use Readability for main content extraction\n    const reader = new Readability(documentClone);\n    const article = reader.parse();\n    \n    let content = '';\n    let textContent = '';\n    let title = '';\n    let excerpt = '';\n    \n    if (article && article.content) {\n      // Convert HTML to text\n      content = htmlToText(article.content);\n      textContent = article.textContent || '';\n      title = article.title || metadata.title || '';\n      excerpt = article.excerpt || metadata.description || '';\n    } else {\n      // Fallback to basic extraction\n      const extracted = this.fallbackExtraction(document);\n      content = extracted.content;\n      textContent = extracted.textContent;\n      title = extracted.title;\n      excerpt = metadata.description || '';\n    }\n    \n    // Clean up content\n    content = this.cleanContent(content);\n    \n    // Calculate metrics\n    const wordCount = textContent.split(/\\s+/).filter(word => word.length > 0).length;\n    const readingTime = Math.ceil(wordCount / 200); // Average reading speed\n    \n    // Generate content hash for deduplication\n    const contentHash = this.generateContentHash(textContent);\n    \n    return {\n      title,\n      content,\n      textContent,\n      excerpt,\n      author: metadata.author,\n      publishedDate: metadata.publishedDate,\n      modifiedDate: metadata.modifiedDate,\n      lang: document.documentElement.lang || 'en',\n      images,\n      links,\n      metadata,\n      contentHash,\n      wordCount,\n      readingTime,\n    };\n  }\n  \n  /**\n   * Fallback extraction using cheerio\n   */\n  static fallbackExtraction(document: Document): { content: string; textContent: string; title: string } {\n    const $ = cheerio.load(document.documentElement.outerHTML);\n    \n    // Remove unwanted elements\n    $('script, style, nav, header, footer, aside, form, iframe, object, embed').remove();\n    $('.nav, .header, .footer, .sidebar, .advertisement, .ads, .social-share, .comments').remove();\n    $('[class*=\"sidebar\"], [class*=\"header\"], [class*=\"footer\"], [class*=\"nav\"]').remove();\n    $('[id*=\"sidebar\"], [id*=\"header\"], [id*=\"footer\"], [id*=\"nav\"]').remove();\n    \n    // Try to find main content using various selectors\n    const contentSelectors = [\n      'main',\n      'article',\n      '[role=\"main\"]',\n      '.main-content',\n      '#main-content',\n      '.post-content',\n      '.entry-content',\n      '.content-area',\n      '.article-body',\n      '.story-body',\n      '.c-entry-content',\n      '.Post-body',\n      '#content',\n      '.content',\n      'body',\n    ];\n    \n    let mainContent = '';\n    for (const selector of contentSelectors) {\n      const element = $(selector).first();\n      if (element.length && element.text().trim().length > 100) {\n        mainContent = element.html() || '';\n        break;\n      }\n    }\n    \n    // Get title\n    const title = $('title').text() || \n                  $('h1').first().text() || \n                  $('meta[property=\"og:title\"]').attr('content') || \n                  '';\n    \n    // Convert to markdown\n    const content = htmlToText(mainContent);\n    const textContent = $(mainContent).text();\n    \n    return { content, textContent, title: title.trim() };\n  }\n  \n  /**\n   * Extract metadata from the document\n   */\n  static extractMetadata(document: Document): Record<string, any> {\n    const getMeta = (name: string): string | null => {\n      const element = document.querySelector(\n        `meta[name=\"${name}\"], meta[property=\"${name}\"], meta[property=\"og:${name}\"], meta[property=\"article:${name}\"]`\n      );\n      return element ? element.getAttribute('content') : null;\n    };\n    \n    // Extract JSON-LD structured data\n    let structuredData = {};\n    const jsonLdScripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\n    jsonLdScripts.forEach(script => {\n      try {\n        const data = JSON.parse(script.textContent || '{}');\n        structuredData = { ...structuredData, ...data };\n      } catch (e) {\n        // Ignore parsing errors\n      }\n    });\n    \n    return {\n      title: getMeta('title') || document.title,\n      description: getMeta('description'),\n      author: getMeta('author') || getMeta('article:author'),\n      publishedDate: getMeta('published_time') || getMeta('datePublished'),\n      modifiedDate: getMeta('modified_time') || getMeta('dateModified'),\n      keywords: getMeta('keywords'),\n      type: getMeta('type'),\n      image: getMeta('image'),\n      site_name: getMeta('site_name'),\n      ...structuredData,\n    };\n  }\n  \n  /**\n   * Extract images with alt text\n   */\n  static extractImages(document: Document): Array<{ src: string; alt: string }> {\n    const images: Array<{ src: string; alt: string }> = [];\n    const imgElements = document.querySelectorAll('img');\n    \n    imgElements.forEach(img => {\n      const src = img.src || img.getAttribute('data-src') || img.getAttribute('data-lazy-src');\n      if (src && !src.includes('data:image')) { // Skip base64 images\n        images.push({\n          src: src,\n          alt: img.alt || img.getAttribute('title') || 'Image',\n        });\n      }\n    });\n    \n    return images;\n  }\n  \n  /**\n   * Extract links\n   */\n  static extractLinks(document: Document, baseUrl: string): Array<{ href: string; text: string }> {\n    const links: Array<{ href: string; text: string }> = [];\n    const linkElements = document.querySelectorAll('a[href]');\n    const baseUrlObj = new URL(baseUrl);\n    \n    linkElements.forEach(link => {\n      try {\n        const href = link.getAttribute('href');\n        if (href && !href.startsWith('#') && !href.startsWith('javascript:')) {\n          const absoluteUrl = new URL(href, baseUrl).href;\n          const linkUrl = new URL(absoluteUrl);\n          \n          // Only include same-domain links\n          if (linkUrl.hostname === baseUrlObj.hostname) {\n            links.push({\n              href: absoluteUrl,\n              text: link.textContent?.trim() || '',\n            });\n          }\n        }\n      } catch (e) {\n        // Ignore invalid URLs\n      }\n    });\n    \n    // Remove duplicates\n    const uniqueLinks = Array.from(\n      new Map(links.map(link => [link.href, link])).values()\n    );\n    \n    return uniqueLinks;\n  }\n  \n  /**\n   * Clean content\n   */\n  static cleanContent(content: string): string {\n    return content\n      .replace(/\\n{3,}/g, '\\n\\n') // Remove excessive newlines\n      .replace(/\\s+$/gm, '') // Remove trailing spaces\n      .replace(/^\\s+/gm, '') // Remove leading spaces\n      .replace(/\\[(.+?)\\]\\(\\)/g, '$1') // Remove empty links\n      .replace(/!\\[(.+?)\\]\\(\\)/g, '') // Remove broken images\n      .trim();\n  }\n  \n  /**\n   * Generate content hash for deduplication\n   */\n  static generateContentHash(content: string): string {\n    // Normalize content for hashing\n    const normalized = content\n      .toLowerCase()\n      .replace(/\\s+/g, ' ') // Normalize whitespace\n      .replace(/[^\\w\\s]/g, '') // Remove punctuation\n      .trim();\n    \n    return createHash('sha256')\n      .update(normalized)\n      .digest('hex')\n      .substring(0, 16); // Use first 16 chars for efficiency\n  }\n  \n  /**\n   * Check if content is meaningful (not error pages, etc.)\n   */\n  static isValidContent(content: ExtractedContent): boolean {\n    // Check minimum word count\n    if (content.wordCount < 50) {\n      return false;\n    }\n    \n    // Check for common error page indicators\n    const errorIndicators = [\n      '404 not found',\n      '403 forbidden',\n      '500 internal server error',\n      'access denied',\n      'page not found',\n      'error occurred',\n    ];\n    \n    const lowerContent = content.textContent.toLowerCase();\n    for (const indicator of errorIndicators) {\n      if (lowerContent.includes(indicator) && content.wordCount < 200) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n}"],"names":["ContentExtractor","htmlToText","html","$","cheerio","load","remove","append","replaceWith","text","replace","trim","extractWithReadability","url","dom","JSDOM","document","window","documentClone","cloneNode","metadata","extractMetadata","images","extractImages","links","extractLinks","reader","Readability","article","parse","content","textContent","title","excerpt","description","extracted","fallbackExtraction","cleanContent","wordCount","split","filter","word","length","readingTime","Math","ceil","contentHash","generateContentHash","author","publishedDate","modifiedDate","lang","documentElement","outerHTML","contentSelectors","mainContent","selector","element","first","attr","getMeta","name","querySelector","getAttribute","structuredData","jsonLdScripts","querySelectorAll","forEach","script","data","JSON","e","keywords","type","image","site_name","imgElements","img","src","includes","push","alt","baseUrl","linkElements","baseUrlObj","URL","link","href","startsWith","absoluteUrl","linkUrl","hostname","uniqueLinks","Array","from","Map","map","values","normalized","toLowerCase","createHash","update","digest","substring","isValidContent","errorIndicators","lowerContent","indicator"],"mappings":"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"}