0af72060b8c1846061150cf5136c20a5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ContentExtractor", {
    enumerable: true,
    get: function() {
        return ContentExtractor;
    }
});
const _readability = require("@mozilla/readability");
const _jsdom = require("jsdom");
const _cheerio = /*#__PURE__*/ _interop_require_wildcard(require("cheerio"));
const _crypto = require("crypto");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// We'll skip Turndown for now to avoid import issues - can use HTML directly
// or convert to text without markdown formatting
// Helper function to convert HTML to plain text
function htmlToText(html) {
    const $ = _cheerio.load(html);
    // Remove script and style elements
    $('script, style, noscript').remove();
    // Preserve some structure
    $('p, div, section, article').append('\n\n');
    $('br').replaceWith('\n');
    // Get text content
    return $.text().replace(/\n{3,}/g, '\n\n') // Replace multiple newlines
    .replace(/[ \t]+/g, ' ') // Replace multiple spaces/tabs
    .trim();
}
class ContentExtractor {
    /**
   * Extract content using Mozilla's Readability for better accuracy
   */ static extractWithReadability(html, url) {
        // Create virtual DOM
        const dom = new _jsdom.JSDOM(html, {
            url
        });
        const document = dom.window.document;
        // Clone document for Readability (it modifies the DOM)
        const documentClone = document.cloneNode(true);
        // Extract metadata before Readability modifies DOM
        const metadata = this.extractMetadata(document);
        const images = this.extractImages(document);
        const links = this.extractLinks(document, url);
        // Use Readability for main content extraction
        const reader = new _readability.Readability(documentClone);
        const article = reader.parse();
        let content = '';
        let textContent = '';
        let title = '';
        let excerpt = '';
        if (article && article.content) {
            // Convert HTML to text
            content = htmlToText(article.content);
            textContent = article.textContent || '';
            title = article.title || metadata.title || '';
            excerpt = article.excerpt || metadata.description || '';
        } else {
            // Fallback to basic extraction
            const extracted = this.fallbackExtraction(document);
            content = extracted.content;
            textContent = extracted.textContent;
            title = extracted.title;
            excerpt = metadata.description || '';
        }
        // Clean up content
        content = this.cleanContent(content);
        // Calculate metrics
        const wordCount = textContent.split(/\s+/).filter((word)=>word.length > 0).length;
        const readingTime = Math.ceil(wordCount / 200); // Average reading speed
        // Generate content hash for deduplication
        const contentHash = this.generateContentHash(textContent);
        return {
            title,
            content,
            textContent,
            excerpt,
            author: metadata.author,
            publishedDate: metadata.publishedDate,
            modifiedDate: metadata.modifiedDate,
            lang: document.documentElement.lang || 'en',
            images,
            links,
            metadata,
            contentHash,
            wordCount,
            readingTime
        };
    }
    /**
   * Fallback extraction using cheerio
   */ static fallbackExtraction(document) {
        const $ = _cheerio.load(document.documentElement.outerHTML);
        // Remove unwanted elements
        $('script, style, nav, header, footer, aside, form, iframe, object, embed').remove();
        $('.nav, .header, .footer, .sidebar, .advertisement, .ads, .social-share, .comments').remove();
        $('[class*="sidebar"], [class*="header"], [class*="footer"], [class*="nav"]').remove();
        $('[id*="sidebar"], [id*="header"], [id*="footer"], [id*="nav"]').remove();
        // Try to find main content using various selectors
        const contentSelectors = [
            'main',
            'article',
            '[role="main"]',
            '.main-content',
            '#main-content',
            '.post-content',
            '.entry-content',
            '.content-area',
            '.article-body',
            '.story-body',
            '.c-entry-content',
            '.Post-body',
            '#content',
            '.content',
            'body'
        ];
        let mainContent = '';
        for (const selector of contentSelectors){
            const element = $(selector).first();
            if (element.length && element.text().trim().length > 100) {
                mainContent = element.html() || '';
                break;
            }
        }
        // Get title
        const title = $('title').text() || $('h1').first().text() || $('meta[property="og:title"]').attr('content') || '';
        // Convert to markdown
        const content = htmlToText(mainContent);
        const textContent = $(mainContent).text();
        return {
            content,
            textContent,
            title: title.trim()
        };
    }
    /**
   * Extract metadata from the document
   */ static extractMetadata(document) {
        const getMeta = (name)=>{
            const element = document.querySelector(`meta[name="${name}"], meta[property="${name}"], meta[property="og:${name}"], meta[property="article:${name}"]`);
            return element ? element.getAttribute('content') : null;
        };
        // Extract JSON-LD structured data
        let structuredData = {};
        const jsonLdScripts = document.querySelectorAll('script[type="application/ld+json"]');
        jsonLdScripts.forEach((script)=>{
            try {
                const data = JSON.parse(script.textContent || '{}');
                structuredData = {
                    ...structuredData,
                    ...data
                };
            } catch (e) {
            // Ignore parsing errors
            }
        });
        return {
            title: getMeta('title') || document.title,
            description: getMeta('description'),
            author: getMeta('author') || getMeta('article:author'),
            publishedDate: getMeta('published_time') || getMeta('datePublished'),
            modifiedDate: getMeta('modified_time') || getMeta('dateModified'),
            keywords: getMeta('keywords'),
            type: getMeta('type'),
            image: getMeta('image'),
            site_name: getMeta('site_name'),
            ...structuredData
        };
    }
    /**
   * Extract images with alt text
   */ static extractImages(document) {
        const images = [];
        const imgElements = document.querySelectorAll('img');
        imgElements.forEach((img)=>{
            const src = img.src || img.getAttribute('data-src') || img.getAttribute('data-lazy-src');
            if (src && !src.includes('data:image')) {
                images.push({
                    src: src,
                    alt: img.alt || img.getAttribute('title') || 'Image'
                });
            }
        });
        return images;
    }
    /**
   * Extract links
   */ static extractLinks(document, baseUrl) {
        const links = [];
        const linkElements = document.querySelectorAll('a[href]');
        const baseUrlObj = new URL(baseUrl);
        linkElements.forEach((link)=>{
            try {
                const href = link.getAttribute('href');
                if (href && !href.startsWith('#') && !href.startsWith('javascript:')) {
                    const absoluteUrl = new URL(href, baseUrl).href;
                    const linkUrl = new URL(absoluteUrl);
                    // Only include same-domain links
                    if (linkUrl.hostname === baseUrlObj.hostname) {
                        links.push({
                            href: absoluteUrl,
                            text: link.textContent?.trim() || ''
                        });
                    }
                }
            } catch (e) {
            // Ignore invalid URLs
            }
        });
        // Remove duplicates
        const uniqueLinks = Array.from(new Map(links.map((link)=>[
                link.href,
                link
            ])).values());
        return uniqueLinks;
    }
    /**
   * Clean content
   */ static cleanContent(content) {
        return content.replace(/\n{3,}/g, '\n\n') // Remove excessive newlines
        .replace(/\s+$/gm, '') // Remove trailing spaces
        .replace(/^\s+/gm, '') // Remove leading spaces
        .replace(/\[(.+?)\]\(\)/g, '$1') // Remove empty links
        .replace(/!\[(.+?)\]\(\)/g, '') // Remove broken images
        .trim();
    }
    /**
   * Generate content hash for deduplication
   */ static generateContentHash(content) {
        // Normalize content for hashing
        const normalized = content.toLowerCase().replace(/\s+/g, ' ') // Normalize whitespace
        .replace(/[^\w\s]/g, '') // Remove punctuation
        .trim();
        return (0, _crypto.createHash)('sha256').update(normalized).digest('hex').substring(0, 16); // Use first 16 chars for efficiency
    }
    /**
   * Check if content is meaningful (not error pages, etc.)
   */ static isValidContent(content) {
        // Check minimum word count
        if (content.wordCount < 50) {
            return false;
        }
        // Check for common error page indicators
        const errorIndicators = [
            '404 not found',
            '403 forbidden',
            '500 internal server error',
            'access denied',
            'page not found',
            'error occurred'
        ];
        const lowerContent = content.textContent.toLowerCase();
        for (const indicator of errorIndicators){
            if (lowerContent.includes(indicator) && content.wordCount < 200) {
                return false;
            }
        }
        return true;
    }
}

//# sourceMappingURL=data:application/json;base64,