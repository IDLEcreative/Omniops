{"version":3,"sources":["/Users/jamesguy/Omniops/lib/ai-content-extractor.ts"],"sourcesContent":["import { ContentExtractor, ExtractedContent } from './content-extractor';\nimport * as cheerio from 'cheerio';\nimport { createHash } from 'crypto';\nimport { JSDOM } from 'jsdom';\nimport TurndownService from 'turndown';\n\n/**\n * Represents a semantic chunk of content with AI optimization metadata\n */\nexport interface SemanticChunk {\n  id: string;\n  type: 'main' | 'faq' | 'features' | 'specs' | 'support' | 'legal';\n  content: string;\n  tokens: number;\n  relevanceScore: number;\n  metadata: {\n    headings: string[];\n    keywords: string[];\n    entities: string[];\n  };\n}\n\n/**\n * AI-optimized content extraction result\n */\nexport interface AIOptimizedContent extends ExtractedContent {\n  originalTokens: number;\n  optimizedTokens: number;\n  compressionRatio: number;\n  chunks: SemanticChunk[];\n  summary: string;\n  keyFacts: string[];\n  qaPairs: Array<{ question: string; answer: string }>;\n  topicTags: string[];\n  processingStats: {\n    removedElements: number;\n    deduplicatedSections: number;\n    compressionTime: number;\n  };\n}\n\n/**\n * Cache entry structure for optimized content\n */\ninterface CacheEntry {\n  content: AIOptimizedContent;\n  timestamp: number;\n  ttl: number; // Time to live in milliseconds\n}\n\n/**\n * AI-optimized content extractor that reduces token usage by ~70% while preserving semantic meaning\n */\nexport class AIContentExtractor extends ContentExtractor {\n  private static cache = new Map<string, CacheEntry>();\n  private static readonly CACHE_TTL = 30 * 60 * 1000; // 30 minutes\n  private static readonly MAX_CACHE_SIZE = 1000;\n\n  /**\n   * Main extraction method with AI optimization\n   */\n  static async extractOptimized(html: string, url: string): Promise<AIOptimizedContent> {\n    const startTime = Date.now();\n    \n    // Check cache first\n    const cacheKey = this.generateCacheKey(html, url);\n    const cached = this.getFromCache(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    // Extract base content using parent class\n    const baseContent = this.extractWithReadability(html, url);\n    \n    // If content is not valid, return early\n    if (!this.isValidContent(baseContent)) {\n      const emptyResult: AIOptimizedContent = {\n        ...baseContent,\n        originalTokens: 0,\n        optimizedTokens: 0,\n        compressionRatio: 0,\n        chunks: [],\n        summary: '',\n        keyFacts: [],\n        qaPairs: [],\n        topicTags: [],\n        processingStats: {\n          removedElements: 0,\n          deduplicatedSections: 0,\n          compressionTime: Date.now() - startTime\n        }\n      };\n      return emptyResult;\n    }\n\n    // Perform AI-optimized extraction\n    const dom = new JSDOM(html, { url });\n    const document = dom.window.document;\n    \n    // Remove unwanted elements and count them\n    const removedElements = this.removeUnwantedElements(document);\n    \n    // Extract and optimize content\n    const optimizedHtml = document.documentElement.outerHTML;\n    const $ = cheerio.load(optimizedHtml);\n    \n    // Extract semantic chunks\n    const chunks = this.extractSemanticChunks($, baseContent);\n    \n    // Deduplicate and compress content\n    const { compressedContent, deduplicatedCount } = this.compressContent(baseContent.content);\n    \n    // Generate summary and insights\n    const summary = this.generateSummary(baseContent.textContent);\n    const keyFacts = this.extractKeyFacts(baseContent.textContent);\n    const qaPairs = this.extractQAPairs($);\n    const topicTags = this.generateTopicTags(baseContent.textContent, baseContent.metadata);\n    \n    // Calculate token counts\n    const originalTokens = this.estimateTokens(baseContent.content);\n    const optimizedTokens = this.estimateTokens(compressedContent);\n    const compressionRatio = originalTokens > 0 ? ((originalTokens - optimizedTokens) / originalTokens) : 0;\n\n    const result: AIOptimizedContent = {\n      ...baseContent,\n      content: compressedContent,\n      textContent: this.stripMarkdown(compressedContent),\n      originalTokens,\n      optimizedTokens,\n      compressionRatio,\n      chunks,\n      summary,\n      keyFacts,\n      qaPairs,\n      topicTags,\n      processingStats: {\n        removedElements,\n        deduplicatedSections: deduplicatedCount,\n        compressionTime: Date.now() - startTime\n      }\n    };\n\n    // Cache the result\n    this.setCache(cacheKey, result);\n    \n    return result;\n  }\n\n  /**\n   * Remove navigation, footer, header, sidebar content and other unwanted elements\n   */\n  private static removeUnwantedElements(document: Document): number {\n    let removedCount = 0;\n    \n    // Define selectors for unwanted elements\n    const unwantedSelectors = [\n      // Structural elements\n      'nav', 'header', 'footer', 'aside', 'form', 'iframe', 'object', 'embed',\n      'script', 'style', 'noscript', 'meta', 'link[rel=\"stylesheet\"]',\n      \n      // Common class-based selectors\n      '.nav', '.navbar', '.navigation', '.menu', '.header', '.footer', \n      '.sidebar', '.side-bar', '.aside', '.advertisement', '.ads', '.ad',\n      '.social-share', '.social-media', '.comments', '.comment-section',\n      '.related-posts', '.recommended', '.popup', '.modal', '.overlay',\n      '.cookie-notice', '.cookie-banner', '.newsletter', '.subscription',\n      '.breadcrumb', '.breadcrumbs', '.pagination', '.page-numbers',\n      '.author-bio', '.author-info', '.share-buttons', '.tags-container',\n      \n      // ID-based selectors\n      '#nav', '#navbar', '#navigation', '#menu', '#header', '#footer',\n      '#sidebar', '#side-bar', '#ads', '#advertisement', '#social',\n      '#comments', '#comment-section', '#related', '#recommended',\n      \n      // Attribute-based selectors\n      '[role=\"navigation\"]', '[role=\"banner\"]', '[role=\"contentinfo\"]',\n      '[role=\"complementary\"]', '[aria-label*=\"navigation\"]',\n      '[aria-label*=\"menu\"]', '[class*=\"sidebar\"]', '[class*=\"header\"]',\n      '[class*=\"footer\"]', '[class*=\"nav\"]', '[id*=\"sidebar\"]',\n      '[id*=\"header\"]', '[id*=\"footer\"]', '[id*=\"nav\"]',\n      \n      // Widget and plugin elements\n      '.widget', '.wp-widget', '.plugin', '.external-content',\n      '.third-party', '.tracking', '.analytics', '.gtm'\n    ];\n\n    // Remove elements\n    unwantedSelectors.forEach(selector => {\n      try {\n        const elements = document.querySelectorAll(selector);\n        elements.forEach(element => {\n          element.remove();\n          removedCount++;\n        });\n      } catch (e) {\n        // Ignore selector errors\n      }\n    });\n\n    // Remove elements with minimal text content (likely navigation/ads)\n    const allElements = document.querySelectorAll('div, section, article, span');\n    allElements.forEach(element => {\n      const text = element.textContent?.trim() || '';\n      const childCount = element.children.length;\n      \n      // Remove elements that are likely navigation/ads\n      if (text.length < 50 && childCount > 5) {\n        const linkCount = element.querySelectorAll('a').length;\n        if (linkCount / childCount > 0.8) { // High link density\n          element.remove();\n          removedCount++;\n        }\n      }\n    });\n\n    return removedCount;\n  }\n\n  /**\n   * Extract semantic chunks from the content\n   */\n  private static extractSemanticChunks($: cheerio.CheerioAPI, baseContent: ExtractedContent): SemanticChunk[] {\n    const chunks: SemanticChunk[] = [];\n    \n    // Extract FAQ sections\n    this.extractFAQChunks($, chunks);\n    \n    // Extract feature sections\n    this.extractFeatureChunks($, chunks);\n    \n    // Extract specification sections\n    this.extractSpecChunks($, chunks);\n    \n    // Extract support/help sections\n    this.extractSupportChunks($, chunks);\n    \n    // Extract legal sections\n    this.extractLegalChunks($, chunks);\n    \n    // Extract main content chunks\n    this.extractMainContentChunks($, chunks, baseContent);\n    \n    return chunks;\n  }\n\n  /**\n   * Extract FAQ-related chunks\n   */\n  private static extractFAQChunks($: cheerio.CheerioAPI, chunks: SemanticChunk[]): void {\n    const faqSelectors = [\n      '.faq', '.faqs', '.frequently-asked-questions', '.q-and-a', '.questions',\n      '[class*=\"faq\"]', '[id*=\"faq\"]', '.accordion', '.collapsible'\n    ];\n    \n    faqSelectors.forEach(selector => {\n      $(selector).each((_, element) => {\n        const content = $(element).text().trim();\n        if (content.length > 50) {\n          const headings = this.extractHeadings($(element));\n          const keywords = this.extractKeywords(content);\n          const entities = this.extractEntities(content);\n          \n          chunks.push({\n            id: this.generateChunkId('faq', content),\n            type: 'faq',\n            content: this.cleanAndCompress(content),\n            tokens: this.estimateTokens(content),\n            relevanceScore: this.calculateRelevanceScore(content, 'faq'),\n            metadata: { headings, keywords, entities }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Extract feature-related chunks\n   */\n  private static extractFeatureChunks($: cheerio.CheerioAPI, chunks: SemanticChunk[]): void {\n    const featureSelectors = [\n      '.features', '.feature-list', '.benefits', '.capabilities',\n      '[class*=\"feature\"]', '[class*=\"benefit\"]', '.services', '.offerings'\n    ];\n    \n    featureSelectors.forEach(selector => {\n      $(selector).each((_, element) => {\n        const content = $(element).text().trim();\n        if (content.length > 50) {\n          const headings = this.extractHeadings($(element));\n          const keywords = this.extractKeywords(content);\n          const entities = this.extractEntities(content);\n          \n          chunks.push({\n            id: this.generateChunkId('features', content),\n            type: 'features',\n            content: this.cleanAndCompress(content),\n            tokens: this.estimateTokens(content),\n            relevanceScore: this.calculateRelevanceScore(content, 'features'),\n            metadata: { headings, keywords, entities }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Extract specification-related chunks\n   */\n  private static extractSpecChunks($: cheerio.CheerioAPI, chunks: SemanticChunk[]): void {\n    const specSelectors = [\n      '.specs', '.specifications', '.technical', '.details', '.parameters',\n      '[class*=\"spec\"]', 'table', '.data-table', '.product-details'\n    ];\n    \n    specSelectors.forEach(selector => {\n      $(selector).each((_, element) => {\n        const content = $(element).text().trim();\n        if (content.length > 50) {\n          const headings = this.extractHeadings($(element));\n          const keywords = this.extractKeywords(content);\n          const entities = this.extractEntities(content);\n          \n          chunks.push({\n            id: this.generateChunkId('specs', content),\n            type: 'specs',\n            content: this.cleanAndCompress(content),\n            tokens: this.estimateTokens(content),\n            relevanceScore: this.calculateRelevanceScore(content, 'specs'),\n            metadata: { headings, keywords, entities }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Extract support-related chunks\n   */\n  private static extractSupportChunks($: cheerio.CheerioAPI, chunks: SemanticChunk[]): void {\n    const supportSelectors = [\n      '.support', '.help', '.assistance', '.contact', '.customer-service',\n      '[class*=\"support\"]', '[class*=\"help\"]', '.documentation', '.guides'\n    ];\n    \n    supportSelectors.forEach(selector => {\n      $(selector).each((_, element) => {\n        const content = $(element).text().trim();\n        if (content.length > 50) {\n          const headings = this.extractHeadings($(element));\n          const keywords = this.extractKeywords(content);\n          const entities = this.extractEntities(content);\n          \n          chunks.push({\n            id: this.generateChunkId('support', content),\n            type: 'support',\n            content: this.cleanAndCompress(content),\n            tokens: this.estimateTokens(content),\n            relevanceScore: this.calculateRelevanceScore(content, 'support'),\n            metadata: { headings, keywords, entities }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Extract legal-related chunks\n   */\n  private static extractLegalChunks($: cheerio.CheerioAPI, chunks: SemanticChunk[]): void {\n    const legalSelectors = [\n      '.legal', '.terms', '.privacy', '.policy', '.disclaimer', '.copyright',\n      '[class*=\"legal\"]', '[class*=\"terms\"]', '[class*=\"privacy\"]'\n    ];\n    \n    legalSelectors.forEach(selector => {\n      $(selector).each((_, element) => {\n        const content = $(element).text().trim();\n        if (content.length > 50) {\n          const headings = this.extractHeadings($(element));\n          const keywords = this.extractKeywords(content);\n          const entities = this.extractEntities(content);\n          \n          chunks.push({\n            id: this.generateChunkId('legal', content),\n            type: 'legal',\n            content: this.cleanAndCompress(content),\n            tokens: this.estimateTokens(content),\n            relevanceScore: this.calculateRelevanceScore(content, 'legal'),\n            metadata: { headings, keywords, entities }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Extract main content chunks\n   */\n  private static extractMainContentChunks($: cheerio.CheerioAPI, chunks: SemanticChunk[], baseContent: ExtractedContent): void {\n    // Split main content into paragraphs\n    const paragraphs = baseContent.content.split(/\\n\\s*\\n/).filter(p => p.trim().length > 100);\n    \n    paragraphs.forEach((paragraph, index) => {\n      const content = paragraph.trim();\n      const headings = this.extractHeadings(cheerio.load(`<div>${content}</div>`)('div'));\n      const keywords = this.extractKeywords(content);\n      const entities = this.extractEntities(content);\n      \n      chunks.push({\n        id: this.generateChunkId('main', content + index),\n        type: 'main',\n        content: this.cleanAndCompress(content),\n        tokens: this.estimateTokens(content),\n        relevanceScore: this.calculateRelevanceScore(content, 'main'),\n        metadata: { headings, keywords, entities }\n      });\n    });\n  }\n\n  /**\n   * Compress content using various techniques\n   */\n  private static compressContent(content: string): { compressedContent: string; deduplicatedCount: number } {\n    let compressed = content;\n    let deduplicatedCount = 0;\n    \n    // Remove redundant whitespace\n    compressed = compressed.replace(/\\s+/g, ' ').trim();\n    \n    // Remove redundant adjectives and filler words\n    const fillerWords = [\n      'very', 'really', 'quite', 'rather', 'extremely', 'incredibly', 'absolutely',\n      'definitely', 'certainly', 'obviously', 'clearly', 'basically', 'essentially',\n      'actually', 'literally', 'simply', 'just', 'only', 'even', 'still', 'yet'\n    ];\n    \n    const fillerPattern = new RegExp(`\\\\b(${fillerWords.join('|')})\\\\b`, 'gi');\n    compressed = compressed.replace(fillerPattern, '');\n    \n    // Consolidate similar sentences\n    const sentences = compressed.split(/[.!?]+/).filter(s => s.trim().length > 20);\n    const uniqueSentences = new Set<string>();\n    const consolidatedSentences: string[] = [];\n    \n    sentences.forEach(sentence => {\n      const normalized = this.normalizeSentence(sentence);\n      let isDuplicate = false;\n      \n      for (const existing of uniqueSentences) {\n        if (this.calculateSimilarity(normalized, existing) > 0.85) {\n          isDuplicate = true;\n          deduplicatedCount++;\n          break;\n        }\n      }\n      \n      if (!isDuplicate) {\n        uniqueSentences.add(normalized);\n        consolidatedSentences.push(sentence.trim());\n      }\n    });\n    \n    compressed = consolidatedSentences.join('. ') + '.';\n    \n    // Convert lists to more concise formats\n    compressed = this.compressLists(compressed);\n    \n    // Final cleanup\n    compressed = compressed.replace(/\\s+/g, ' ').trim();\n    \n    return { compressedContent: compressed, deduplicatedCount };\n  }\n\n  /**\n   * Compress list formats\n   */\n  private static compressLists(content: string): string {\n    // Convert verbose lists to concise formats\n    let compressed = content;\n    \n    // Convert \"- Item one\\n- Item two\\n- Item three\" to \"Items: one, two, three\"\n    compressed = compressed.replace(\n      /(?:^|\\n)(?:-|\\*|\\d+\\.) (.+?)(?=(?:\\n(?:-|\\*|\\d+\\.))|$)/gm,\n      (match, item) => item.trim() + ', '\n    );\n    \n    // Clean up trailing commas\n    compressed = compressed.replace(/, $/, '');\n    \n    return compressed;\n  }\n\n  /**\n   * Generate a concise summary of the content\n   */\n  private static generateSummary(textContent: string): string {\n    const sentences = textContent.split(/[.!?]+/).filter(s => s.trim().length > 20);\n    \n    if (sentences.length <= 3) {\n      return sentences.join('. ').trim() + '.';\n    }\n    \n    // Score sentences by length and position (earlier sentences get higher scores)\n    const scoredSentences = sentences.map((sentence, index) => ({\n      text: sentence.trim(),\n      score: (sentence.length / 100) + (1 / (index + 1)) * 2\n    }));\n    \n    // Sort by score and take top 3\n    const topSentences = scoredSentences\n      .sort((a, b) => b.score - a.score)\n      .slice(0, 3)\n      .map(s => s.text);\n    \n    return topSentences.join('. ') + '.';\n  }\n\n  /**\n   * Extract key facts and figures from content\n   */\n  private static extractKeyFacts(textContent: string): string[] {\n    const facts: string[] = [];\n    \n    // Extract sentences with numbers, percentages, dates\n    const factPatterns = [\n      /\\b\\d+(?:\\.\\d+)?%\\b/g, // Percentages\n      /\\b\\d{4}\\b/g, // Years\n      /\\$[\\d,]+(?:\\.\\d{2})?\\b/g, // Money\n      /\\b\\d+(?:,\\d{3})*(?:\\.\\d+)?\\s*(?:million|billion|thousand|k|m|b)\\b/gi, // Large numbers\n      /\\b\\d+(?:\\.\\d+)?\\s*(?:seconds|minutes|hours|days|weeks|months|years)\\b/gi // Time\n    ];\n    \n    const sentences = textContent.split(/[.!?]+/);\n    sentences.forEach(sentence => {\n      const trimmed = sentence.trim();\n      if (trimmed.length > 20) {\n        factPatterns.forEach(pattern => {\n          if (pattern.test(trimmed)) {\n            facts.push(trimmed);\n          }\n        });\n      }\n    });\n    \n    // Remove duplicates and limit to 10 facts\n    return Array.from(new Set(facts)).slice(0, 10);\n  }\n\n  /**\n   * Extract Q&A pairs from FAQ sections\n   */\n  private static extractQAPairs($: cheerio.CheerioAPI): Array<{ question: string; answer: string }> {\n    const qaPairs: Array<{ question: string; answer: string }> = [];\n    \n    // Look for common Q&A patterns\n    const qaSelectors = [\n      '.faq-item', '.qa-item', '.question-answer',\n      '.accordion-item', '.collapsible-item'\n    ];\n    \n    qaSelectors.forEach(selector => {\n      $(selector).each((_, element) => {\n        const $element = $(element);\n        \n        // Try different patterns for questions and answers\n        let question = $element.find('.question, .q, h3, h4, h5').first().text().trim();\n        let answer = $element.find('.answer, .a, p').first().text().trim();\n        \n        if (!question || !answer) {\n          // Try alternative pattern: look for strong/bold text followed by regular text\n          const strongText = $element.find('strong, b').first().text().trim();\n          if (strongText && strongText.length > 10) {\n            question = strongText;\n            answer = $element.text().replace(strongText, '').trim();\n          }\n        }\n        \n        if (question && answer && question.length > 10 && answer.length > 20) {\n          qaPairs.push({\n            question: question.replace(/[?]*$/, '?'),\n            answer: this.cleanAndCompress(answer)\n          });\n        }\n      });\n    });\n    \n    return qaPairs.slice(0, 20); // Limit to 20 Q&A pairs\n  }\n\n  /**\n   * Generate topic tags automatically\n   */\n  private static generateTopicTags(textContent: string, metadata: Record<string, any>): string[] {\n    const tags = new Set<string>();\n    \n    // Extract from metadata keywords\n    if (metadata.keywords) {\n      const keywordString = typeof metadata.keywords === 'string' ? metadata.keywords : String(metadata.keywords);\n      keywordString.split(/[,;]/).forEach(keyword => {\n        const cleaned = keyword.trim().toLowerCase();\n        if (cleaned.length > 2 && cleaned.length < 30) {\n          tags.add(cleaned);\n        }\n      });\n    }\n    \n    // Extract common technical terms and industry keywords\n    const commonTerms = [\n      'api', 'software', 'service', 'product', 'support', 'customer', 'business',\n      'integration', 'solution', 'platform', 'system', 'application', 'data',\n      'security', 'payment', 'ecommerce', 'retail', 'analytics', 'dashboard',\n      'mobile', 'web', 'cloud', 'saas', 'automation', 'workflow', 'enterprise'\n    ];\n    \n    const lowerContent = textContent.toLowerCase();\n    commonTerms.forEach(term => {\n      if (lowerContent.includes(term)) {\n        tags.add(term);\n      }\n    });\n    \n    // Extract capitalized words (likely proper nouns/brands)\n    const capitalizedWords = textContent.match(/\\b[A-Z][a-z]+\\b/g) || [];\n    capitalizedWords.forEach(word => {\n      if (word.length > 3 && word.length < 20) {\n        tags.add(word.toLowerCase());\n      }\n    });\n    \n    return Array.from(tags).slice(0, 15); // Limit to 15 tags\n  }\n\n  /**\n   * Estimate token count using word-based approximation\n   * This is a simplified version - for production, consider using tiktoken\n   */\n  private static estimateTokens(text: string): number {\n    // Rough approximation: 1 token ≈ 0.75 words for English text\n    const words = text.split(/\\s+/).length;\n    return Math.ceil(words * 0.75);\n  }\n\n  /**\n   * Helper methods\n   */\n  private static stripMarkdown(content: string): string {\n    return content\n      .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Bold\n      .replace(/\\*(.*?)\\*/g, '$1') // Italic\n      .replace(/`(.*?)`/g, '$1') // Code\n      .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1') // Links\n      .replace(/^#+\\s*/gm, '') // Headers\n      .replace(/^[-*+]\\s*/gm, '') // Lists\n      .trim();\n  }\n\n  private static extractHeadings($element: cheerio.Cheerio<any>): string[] {\n    const headings: string[] = [];\n    $element.find('h1, h2, h3, h4, h5, h6').each((_, el) => {\n      const $el = cheerio.load(el);\n      const heading = $el.text().trim();\n      if (heading && heading.length > 3) {\n        headings.push(heading);\n      }\n    });\n    return headings;\n  }\n\n  private static extractKeywords(content: string): string[] {\n    // Simple keyword extraction based on word frequency\n    const words = content.toLowerCase()\n      .replace(/[^\\w\\s]/g, ' ')\n      .split(/\\s+/)\n      .filter(word => word.length > 3 && word.length < 20);\n    \n    const wordCount = new Map<string, number>();\n    words.forEach(word => {\n      wordCount.set(word, (wordCount.get(word) || 0) + 1);\n    });\n    \n    return Array.from(wordCount.entries())\n      .filter(([word, count]) => count > 1)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([word]) => word);\n  }\n\n  private static extractEntities(content: string): string[] {\n    // Simple entity extraction - look for capitalized words and common patterns\n    const entities = new Set<string>();\n    \n    // Capitalized words (proper nouns)\n    const capitalizedWords = content.match(/\\b[A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*\\b/g) || [];\n    capitalizedWords.forEach(word => {\n      if (word.length > 3 && word.length < 50) {\n        entities.add(word);\n      }\n    });\n    \n    // Email addresses\n    const emails = content.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g) || [];\n    emails.forEach(email => entities.add(email));\n    \n    // URLs\n    const urls = content.match(/https?:\\/\\/[^\\s]+/g) || [];\n    urls.forEach(url => entities.add(url));\n    \n    return Array.from(entities).slice(0, 15);\n  }\n\n  private static generateChunkId(type: string, content: string): string {\n    const hash = createHash('md5').update(content).digest('hex').substring(0, 8);\n    return `${type}_${hash}`;\n  }\n\n  private static calculateRelevanceScore(content: string, type: string): number {\n    // Base score by content length (longer content gets higher score)\n    let score = Math.min(content.length / 1000, 1.0);\n    \n    // Boost score based on type-specific keywords\n    const typeKeywords = {\n      faq: ['question', 'answer', 'how', 'what', 'why', 'when', 'where'],\n      features: ['feature', 'benefit', 'advantage', 'capability', 'service'],\n      specs: ['specification', 'technical', 'parameter', 'requirement', 'detail'],\n      support: ['help', 'support', 'assist', 'guide', 'documentation', 'contact'],\n      legal: ['terms', 'privacy', 'policy', 'legal', 'copyright', 'license'],\n      main: ['overview', 'introduction', 'about', 'description', 'summary']\n    };\n    \n    const keywords = typeKeywords[type as keyof typeof typeKeywords] || [];\n    const lowerContent = content.toLowerCase();\n    \n    keywords.forEach(keyword => {\n      if (lowerContent.includes(keyword)) {\n        score += 0.1;\n      }\n    });\n    \n    return Math.min(score, 1.0);\n  }\n\n  private static cleanAndCompress(content: string): string {\n    return content\n      .replace(/\\s+/g, ' ')\n      .replace(/\\n+/g, ' ')\n      .trim();\n  }\n\n  private static normalizeSentence(sentence: string): string {\n    return sentence\n      .toLowerCase()\n      .replace(/[^\\w\\s]/g, '')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  private static calculateSimilarity(text1: string, text2: string): number {\n    const words1 = new Set(text1.split(/\\s+/));\n    const words2 = new Set(text2.split(/\\s+/));\n    \n    const intersection = new Set([...words1].filter(x => words2.has(x)));\n    const union = new Set([...words1, ...words2]);\n    \n    return intersection.size / union.size;\n  }\n\n  /**\n   * Cache management\n   */\n  private static generateCacheKey(html: string, url: string): string {\n    const content = html.substring(0, 1000) + url; // Use first 1KB + URL for key\n    return createHash('md5').update(content).digest('hex');\n  }\n\n  private static getFromCache(key: string): AIOptimizedContent | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n    \n    const now = Date.now();\n    if (now - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return entry.content;\n  }\n\n  private static setCache(key: string, content: AIOptimizedContent): void {\n    // Clean old entries if cache is too large\n    if (this.cache.size >= this.MAX_CACHE_SIZE) {\n      const oldestKey = this.cache.keys().next().value;\n      if (oldestKey) {\n        this.cache.delete(oldestKey);\n      }\n    }\n    \n    this.cache.set(key, {\n      content,\n      timestamp: Date.now(),\n      ttl: this.CACHE_TTL\n    });\n  }\n\n  /**\n   * Clear cache (useful for testing or memory management)\n   */\n  static clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  static getCacheStats(): { size: number; maxSize: number; hitRate?: number } {\n    return {\n      size: this.cache.size,\n      maxSize: this.MAX_CACHE_SIZE\n    };\n  }\n}\n\n/**\n * Usage Examples:\n * \n * // Basic usage\n * const optimizedContent = await AIContentExtractor.extractOptimized(html, url);\n * console.log(`Compression ratio: ${optimizedContent.compressionRatio * 100}%`);\n * console.log(`Original tokens: ${optimizedContent.originalTokens}`);\n * console.log(`Optimized tokens: ${optimizedContent.optimizedTokens}`);\n * \n * // Access semantic chunks\n * const faqChunks = optimizedContent.chunks.filter(chunk => chunk.type === 'faq');\n * const mainChunks = optimizedContent.chunks\n *   .filter(chunk => chunk.type === 'main')\n *   .sort((a, b) => b.relevanceScore - a.relevanceScore);\n * \n * // Use pre-computed insights\n * console.log('Summary:', optimizedContent.summary);\n * console.log('Key Facts:', optimizedContent.keyFacts);\n * console.log('Q&A Pairs:', optimizedContent.qaPairs);\n * console.log('Topic Tags:', optimizedContent.topicTags);\n * \n * // Cache management\n * console.log('Cache stats:', AIContentExtractor.getCacheStats());\n * AIContentExtractor.clearCache(); // Clear cache if needed\n */"],"names":["AIContentExtractor","ContentExtractor","cache","Map","CACHE_TTL","MAX_CACHE_SIZE","extractOptimized","html","url","startTime","Date","now","cacheKey","generateCacheKey","cached","getFromCache","baseContent","extractWithReadability","isValidContent","emptyResult","originalTokens","optimizedTokens","compressionRatio","chunks","summary","keyFacts","qaPairs","topicTags","processingStats","removedElements","deduplicatedSections","compressionTime","dom","JSDOM","document","window","removeUnwantedElements","optimizedHtml","documentElement","outerHTML","$","cheerio","load","extractSemanticChunks","compressedContent","deduplicatedCount","compressContent","content","generateSummary","textContent","extractKeyFacts","extractQAPairs","generateTopicTags","metadata","estimateTokens","result","stripMarkdown","setCache","removedCount","unwantedSelectors","forEach","selector","elements","querySelectorAll","element","remove","e","allElements","text","trim","childCount","children","length","linkCount","extractFAQChunks","extractFeatureChunks","extractSpecChunks","extractSupportChunks","extractLegalChunks","extractMainContentChunks","faqSelectors","each","_","headings","extractHeadings","keywords","extractKeywords","entities","extractEntities","push","id","generateChunkId","type","cleanAndCompress","tokens","relevanceScore","calculateRelevanceScore","featureSelectors","specSelectors","supportSelectors","legalSelectors","paragraphs","split","filter","p","paragraph","index","compressed","replace","fillerWords","fillerPattern","RegExp","join","sentences","s","uniqueSentences","Set","consolidatedSentences","sentence","normalized","normalizeSentence","isDuplicate","existing","calculateSimilarity","add","compressLists","match","item","scoredSentences","map","score","topSentences","sort","a","b","slice","facts","factPatterns","trimmed","pattern","test","Array","from","qaSelectors","$element","question","find","first","answer","strongText","tags","keywordString","String","keyword","cleaned","toLowerCase","commonTerms","lowerContent","term","includes","capitalizedWords","word","words","Math","ceil","el","$el","heading","wordCount","set","get","entries","count","emails","email","urls","hash","createHash","update","digest","substring","min","typeKeywords","faq","features","specs","support","legal","main","text1","text2","words1","words2","intersection","x","has","union","size","key","entry","timestamp","ttl","delete","oldestKey","keys","next","value","clearCache","clear","getCacheStats","maxSize"],"mappings":"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"}