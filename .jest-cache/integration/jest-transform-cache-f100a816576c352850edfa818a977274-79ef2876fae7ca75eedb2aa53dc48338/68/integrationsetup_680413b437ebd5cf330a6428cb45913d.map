{"version":3,"sources":["/Users/jamesguy/Omniops/__tests__/utils/integration-setup.js"],"sourcesContent":["/**\n * Integration Test Setup\n * Additional setup for integration tests specifically\n */\n\nimport { jest } from '@jest/globals'\n\n// Set longer timeout for integration tests\njest.setTimeout(120000) // 2 minutes\n\n// Mock console methods to reduce noise during tests\nconst originalConsoleError = console.error\nconst originalConsoleWarn = console.warn\nconst originalConsoleLog = console.log\n\nbeforeEach(() => {\n  // Reset console mocks before each test\n  console.error = jest.fn()\n  console.warn = jest.fn()\n  console.log = jest.fn()\n})\n\nafterEach(() => {\n  // Restore console methods after each test\n  console.error = originalConsoleError\n  console.warn = originalConsoleWarn\n  console.log = originalConsoleLog\n})\n\n// Mock environment variables for consistent testing\nprocess.env.NODE_ENV = 'test'\nprocess.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co'\nprocess.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-role-key'\nprocess.env.REDIS_URL = 'redis://localhost:6379'\nprocess.env.OPENAI_API_KEY = 'test-openai-key'\n\n// Global test utilities\nglobal.testUtils = {\n  sleep: (ms) => new Promise(resolve => setTimeout(resolve, ms)),\n  \n  waitFor: async (condition, timeout = 10000) => {\n    const start = Date.now()\n    while (Date.now() - start < timeout) {\n      if (await condition()) return true\n      await global.testUtils.sleep(100)\n    }\n    throw new Error('Condition not met within timeout')\n  },\n  \n  retry: async (fn, retries = 3, delay = 1000) => {\n    for (let i = 0; i < retries; i++) {\n      try {\n        return await fn()\n      } catch (error) {\n        if (i === retries - 1) throw error\n        await global.testUtils.sleep(delay * Math.pow(2, i))\n      }\n    }\n  }\n}\n\n// Mock external services that might cause issues in CI/CD\njest.mock('ioredis', () => {\n  return jest.fn(() => ({\n    get: jest.fn(),\n    set: jest.fn(),\n    del: jest.fn(),\n    exists: jest.fn(),\n    flushall: jest.fn(),\n    quit: jest.fn(),\n    on: jest.fn(),\n  }))\n})\n\n// Mock Supabase client\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => ({\n    from: jest.fn().mockReturnThis(),\n    select: jest.fn().mockReturnThis(),\n    insert: jest.fn().mockReturnThis(),\n    update: jest.fn().mockReturnThis(),\n    eq: jest.fn().mockReturnThis(),\n    single: jest.fn().mockResolvedValue({ data: null, error: null })\n  }))\n}))\n\n// Mock OpenAI client\njest.mock('openai', () => {\n  return jest.fn(() => ({\n    chat: {\n      completions: {\n        create: jest.fn().mockResolvedValue({\n          choices: [{ message: { content: 'Mock AI response' } }]\n        })\n      }\n    },\n    embeddings: {\n      create: jest.fn().mockResolvedValue({\n        data: [{ embedding: Array(1536).fill(0.1) }]\n      })\n    }\n  }))\n})\n\n// Performance monitoring for integration tests\nlet performanceStart = Date.now()\n\nbeforeAll(() => {\n  performanceStart = Date.now()\n  console.log('ðŸš€ Starting integration tests...')\n})\n\nafterAll(() => {\n  const duration = Date.now() - performanceStart\n  console.log(`âœ… Integration tests completed in ${duration}ms`)\n  \n  // Force cleanup of any remaining handles\n  if (global.gc) {\n    global.gc()\n  }\n})\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason)\n})\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error)\n})"],"names":["jest","setTimeout","originalConsoleError","console","error","originalConsoleWarn","warn","originalConsoleLog","log","beforeEach","fn","afterEach","process","env","NODE_ENV","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","REDIS_URL","OPENAI_API_KEY","global","testUtils","sleep","ms","Promise","resolve","waitFor","condition","timeout","start","Date","now","Error","retry","retries","delay","i","Math","pow","mock","get","set","del","exists","flushall","quit","on","createClient","from","mockReturnThis","select","insert","update","eq","single","mockResolvedValue","data","chat","completions","create","choices","message","content","embeddings","embedding","Array","fill","performanceStart","beforeAll","afterAll","duration","gc","reason","promise"],"mappings":"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"}