46bd60c119426a249c35b9edeaf82732
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AIContentExtractor", {
    enumerable: true,
    get: function() {
        return AIContentExtractor;
    }
});
const _contentextractor = require("./content-extractor");
const _cheerio = /*#__PURE__*/ _interop_require_wildcard(require("cheerio"));
const _crypto = require("crypto");
const _jsdom = require("jsdom");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class AIContentExtractor extends _contentextractor.ContentExtractor {
    static{
        this.cache = new Map();
    }
    static{
        this.CACHE_TTL = 30 * 60 * 1000; // 30 minutes
    }
    static{
        this.MAX_CACHE_SIZE = 1000;
    }
    /**
   * Main extraction method with AI optimization
   */ static async extractOptimized(html, url) {
        const startTime = Date.now();
        // Check cache first
        const cacheKey = this.generateCacheKey(html, url);
        const cached = this.getFromCache(cacheKey);
        if (cached) {
            return cached;
        }
        // Extract base content using parent class
        const baseContent = this.extractWithReadability(html, url);
        // If content is not valid, return early
        if (!this.isValidContent(baseContent)) {
            const emptyResult = {
                ...baseContent,
                originalTokens: 0,
                optimizedTokens: 0,
                compressionRatio: 0,
                chunks: [],
                summary: '',
                keyFacts: [],
                qaPairs: [],
                topicTags: [],
                processingStats: {
                    removedElements: 0,
                    deduplicatedSections: 0,
                    compressionTime: Date.now() - startTime
                }
            };
            return emptyResult;
        }
        // Perform AI-optimized extraction
        const dom = new _jsdom.JSDOM(html, {
            url
        });
        const document = dom.window.document;
        // Remove unwanted elements and count them
        const removedElements = this.removeUnwantedElements(document);
        // Extract and optimize content
        const optimizedHtml = document.documentElement.outerHTML;
        const $ = _cheerio.load(optimizedHtml);
        // Extract semantic chunks
        const chunks = this.extractSemanticChunks($, baseContent);
        // Deduplicate and compress content
        const { compressedContent, deduplicatedCount } = this.compressContent(baseContent.content);
        // Generate summary and insights
        const summary = this.generateSummary(baseContent.textContent);
        const keyFacts = this.extractKeyFacts(baseContent.textContent);
        const qaPairs = this.extractQAPairs($);
        const topicTags = this.generateTopicTags(baseContent.textContent, baseContent.metadata);
        // Calculate token counts
        const originalTokens = this.estimateTokens(baseContent.content);
        const optimizedTokens = this.estimateTokens(compressedContent);
        const compressionRatio = originalTokens > 0 ? (originalTokens - optimizedTokens) / originalTokens : 0;
        const result = {
            ...baseContent,
            content: compressedContent,
            textContent: this.stripMarkdown(compressedContent),
            originalTokens,
            optimizedTokens,
            compressionRatio,
            chunks,
            summary,
            keyFacts,
            qaPairs,
            topicTags,
            processingStats: {
                removedElements,
                deduplicatedSections: deduplicatedCount,
                compressionTime: Date.now() - startTime
            }
        };
        // Cache the result
        this.setCache(cacheKey, result);
        return result;
    }
    /**
   * Remove navigation, footer, header, sidebar content and other unwanted elements
   */ static removeUnwantedElements(document) {
        let removedCount = 0;
        // Define selectors for unwanted elements
        const unwantedSelectors = [
            // Structural elements
            'nav',
            'header',
            'footer',
            'aside',
            'form',
            'iframe',
            'object',
            'embed',
            'script',
            'style',
            'noscript',
            'meta',
            'link[rel="stylesheet"]',
            // Common class-based selectors
            '.nav',
            '.navbar',
            '.navigation',
            '.menu',
            '.header',
            '.footer',
            '.sidebar',
            '.side-bar',
            '.aside',
            '.advertisement',
            '.ads',
            '.ad',
            '.social-share',
            '.social-media',
            '.comments',
            '.comment-section',
            '.related-posts',
            '.recommended',
            '.popup',
            '.modal',
            '.overlay',
            '.cookie-notice',
            '.cookie-banner',
            '.newsletter',
            '.subscription',
            '.breadcrumb',
            '.breadcrumbs',
            '.pagination',
            '.page-numbers',
            '.author-bio',
            '.author-info',
            '.share-buttons',
            '.tags-container',
            // ID-based selectors
            '#nav',
            '#navbar',
            '#navigation',
            '#menu',
            '#header',
            '#footer',
            '#sidebar',
            '#side-bar',
            '#ads',
            '#advertisement',
            '#social',
            '#comments',
            '#comment-section',
            '#related',
            '#recommended',
            // Attribute-based selectors
            '[role="navigation"]',
            '[role="banner"]',
            '[role="contentinfo"]',
            '[role="complementary"]',
            '[aria-label*="navigation"]',
            '[aria-label*="menu"]',
            '[class*="sidebar"]',
            '[class*="header"]',
            '[class*="footer"]',
            '[class*="nav"]',
            '[id*="sidebar"]',
            '[id*="header"]',
            '[id*="footer"]',
            '[id*="nav"]',
            // Widget and plugin elements
            '.widget',
            '.wp-widget',
            '.plugin',
            '.external-content',
            '.third-party',
            '.tracking',
            '.analytics',
            '.gtm'
        ];
        // Remove elements
        unwantedSelectors.forEach((selector)=>{
            try {
                const elements = document.querySelectorAll(selector);
                elements.forEach((element)=>{
                    element.remove();
                    removedCount++;
                });
            } catch (e) {
            // Ignore selector errors
            }
        });
        // Remove elements with minimal text content (likely navigation/ads)
        const allElements = document.querySelectorAll('div, section, article, span');
        allElements.forEach((element)=>{
            const text = element.textContent?.trim() || '';
            const childCount = element.children.length;
            // Remove elements that are likely navigation/ads
            if (text.length < 50 && childCount > 5) {
                const linkCount = element.querySelectorAll('a').length;
                if (linkCount / childCount > 0.8) {
                    element.remove();
                    removedCount++;
                }
            }
        });
        return removedCount;
    }
    /**
   * Extract semantic chunks from the content
   */ static extractSemanticChunks($, baseContent) {
        const chunks = [];
        // Extract FAQ sections
        this.extractFAQChunks($, chunks);
        // Extract feature sections
        this.extractFeatureChunks($, chunks);
        // Extract specification sections
        this.extractSpecChunks($, chunks);
        // Extract support/help sections
        this.extractSupportChunks($, chunks);
        // Extract legal sections
        this.extractLegalChunks($, chunks);
        // Extract main content chunks
        this.extractMainContentChunks($, chunks, baseContent);
        return chunks;
    }
    /**
   * Extract FAQ-related chunks
   */ static extractFAQChunks($, chunks) {
        const faqSelectors = [
            '.faq',
            '.faqs',
            '.frequently-asked-questions',
            '.q-and-a',
            '.questions',
            '[class*="faq"]',
            '[id*="faq"]',
            '.accordion',
            '.collapsible'
        ];
        faqSelectors.forEach((selector)=>{
            $(selector).each((_, element)=>{
                const content = $(element).text().trim();
                if (content.length > 50) {
                    const headings = this.extractHeadings($(element));
                    const keywords = this.extractKeywords(content);
                    const entities = this.extractEntities(content);
                    chunks.push({
                        id: this.generateChunkId('faq', content),
                        type: 'faq',
                        content: this.cleanAndCompress(content),
                        tokens: this.estimateTokens(content),
                        relevanceScore: this.calculateRelevanceScore(content, 'faq'),
                        metadata: {
                            headings,
                            keywords,
                            entities
                        }
                    });
                }
            });
        });
    }
    /**
   * Extract feature-related chunks
   */ static extractFeatureChunks($, chunks) {
        const featureSelectors = [
            '.features',
            '.feature-list',
            '.benefits',
            '.capabilities',
            '[class*="feature"]',
            '[class*="benefit"]',
            '.services',
            '.offerings'
        ];
        featureSelectors.forEach((selector)=>{
            $(selector).each((_, element)=>{
                const content = $(element).text().trim();
                if (content.length > 50) {
                    const headings = this.extractHeadings($(element));
                    const keywords = this.extractKeywords(content);
                    const entities = this.extractEntities(content);
                    chunks.push({
                        id: this.generateChunkId('features', content),
                        type: 'features',
                        content: this.cleanAndCompress(content),
                        tokens: this.estimateTokens(content),
                        relevanceScore: this.calculateRelevanceScore(content, 'features'),
                        metadata: {
                            headings,
                            keywords,
                            entities
                        }
                    });
                }
            });
        });
    }
    /**
   * Extract specification-related chunks
   */ static extractSpecChunks($, chunks) {
        const specSelectors = [
            '.specs',
            '.specifications',
            '.technical',
            '.details',
            '.parameters',
            '[class*="spec"]',
            'table',
            '.data-table',
            '.product-details'
        ];
        specSelectors.forEach((selector)=>{
            $(selector).each((_, element)=>{
                const content = $(element).text().trim();
                if (content.length > 50) {
                    const headings = this.extractHeadings($(element));
                    const keywords = this.extractKeywords(content);
                    const entities = this.extractEntities(content);
                    chunks.push({
                        id: this.generateChunkId('specs', content),
                        type: 'specs',
                        content: this.cleanAndCompress(content),
                        tokens: this.estimateTokens(content),
                        relevanceScore: this.calculateRelevanceScore(content, 'specs'),
                        metadata: {
                            headings,
                            keywords,
                            entities
                        }
                    });
                }
            });
        });
    }
    /**
   * Extract support-related chunks
   */ static extractSupportChunks($, chunks) {
        const supportSelectors = [
            '.support',
            '.help',
            '.assistance',
            '.contact',
            '.customer-service',
            '[class*="support"]',
            '[class*="help"]',
            '.documentation',
            '.guides'
        ];
        supportSelectors.forEach((selector)=>{
            $(selector).each((_, element)=>{
                const content = $(element).text().trim();
                if (content.length > 50) {
                    const headings = this.extractHeadings($(element));
                    const keywords = this.extractKeywords(content);
                    const entities = this.extractEntities(content);
                    chunks.push({
                        id: this.generateChunkId('support', content),
                        type: 'support',
                        content: this.cleanAndCompress(content),
                        tokens: this.estimateTokens(content),
                        relevanceScore: this.calculateRelevanceScore(content, 'support'),
                        metadata: {
                            headings,
                            keywords,
                            entities
                        }
                    });
                }
            });
        });
    }
    /**
   * Extract legal-related chunks
   */ static extractLegalChunks($, chunks) {
        const legalSelectors = [
            '.legal',
            '.terms',
            '.privacy',
            '.policy',
            '.disclaimer',
            '.copyright',
            '[class*="legal"]',
            '[class*="terms"]',
            '[class*="privacy"]'
        ];
        legalSelectors.forEach((selector)=>{
            $(selector).each((_, element)=>{
                const content = $(element).text().trim();
                if (content.length > 50) {
                    const headings = this.extractHeadings($(element));
                    const keywords = this.extractKeywords(content);
                    const entities = this.extractEntities(content);
                    chunks.push({
                        id: this.generateChunkId('legal', content),
                        type: 'legal',
                        content: this.cleanAndCompress(content),
                        tokens: this.estimateTokens(content),
                        relevanceScore: this.calculateRelevanceScore(content, 'legal'),
                        metadata: {
                            headings,
                            keywords,
                            entities
                        }
                    });
                }
            });
        });
    }
    /**
   * Extract main content chunks
   */ static extractMainContentChunks($, chunks, baseContent) {
        // Split main content into paragraphs
        const paragraphs = baseContent.content.split(/\n\s*\n/).filter((p)=>p.trim().length > 100);
        paragraphs.forEach((paragraph, index)=>{
            const content = paragraph.trim();
            const headings = this.extractHeadings(_cheerio.load(`<div>${content}</div>`)('div'));
            const keywords = this.extractKeywords(content);
            const entities = this.extractEntities(content);
            chunks.push({
                id: this.generateChunkId('main', content + index),
                type: 'main',
                content: this.cleanAndCompress(content),
                tokens: this.estimateTokens(content),
                relevanceScore: this.calculateRelevanceScore(content, 'main'),
                metadata: {
                    headings,
                    keywords,
                    entities
                }
            });
        });
    }
    /**
   * Compress content using various techniques
   */ static compressContent(content) {
        let compressed = content;
        let deduplicatedCount = 0;
        // Remove redundant whitespace
        compressed = compressed.replace(/\s+/g, ' ').trim();
        // Remove redundant adjectives and filler words
        const fillerWords = [
            'very',
            'really',
            'quite',
            'rather',
            'extremely',
            'incredibly',
            'absolutely',
            'definitely',
            'certainly',
            'obviously',
            'clearly',
            'basically',
            'essentially',
            'actually',
            'literally',
            'simply',
            'just',
            'only',
            'even',
            'still',
            'yet'
        ];
        const fillerPattern = new RegExp(`\\b(${fillerWords.join('|')})\\b`, 'gi');
        compressed = compressed.replace(fillerPattern, '');
        // Consolidate similar sentences
        const sentences = compressed.split(/[.!?]+/).filter((s)=>s.trim().length > 20);
        const uniqueSentences = new Set();
        const consolidatedSentences = [];
        sentences.forEach((sentence)=>{
            const normalized = this.normalizeSentence(sentence);
            let isDuplicate = false;
            for (const existing of uniqueSentences){
                if (this.calculateSimilarity(normalized, existing) > 0.85) {
                    isDuplicate = true;
                    deduplicatedCount++;
                    break;
                }
            }
            if (!isDuplicate) {
                uniqueSentences.add(normalized);
                consolidatedSentences.push(sentence.trim());
            }
        });
        compressed = consolidatedSentences.join('. ') + '.';
        // Convert lists to more concise formats
        compressed = this.compressLists(compressed);
        // Final cleanup
        compressed = compressed.replace(/\s+/g, ' ').trim();
        return {
            compressedContent: compressed,
            deduplicatedCount
        };
    }
    /**
   * Compress list formats
   */ static compressLists(content) {
        // Convert verbose lists to concise formats
        let compressed = content;
        // Convert "- Item one\n- Item two\n- Item three" to "Items: one, two, three"
        compressed = compressed.replace(/(?:^|\n)(?:-|\*|\d+\.) (.+?)(?=(?:\n(?:-|\*|\d+\.))|$)/gm, (match, item)=>item.trim() + ', ');
        // Clean up trailing commas
        compressed = compressed.replace(/, $/, '');
        return compressed;
    }
    /**
   * Generate a concise summary of the content
   */ static generateSummary(textContent) {
        const sentences = textContent.split(/[.!?]+/).filter((s)=>s.trim().length > 20);
        if (sentences.length <= 3) {
            return sentences.join('. ').trim() + '.';
        }
        // Score sentences by length and position (earlier sentences get higher scores)
        const scoredSentences = sentences.map((sentence, index)=>({
                text: sentence.trim(),
                score: sentence.length / 100 + 1 / (index + 1) * 2
            }));
        // Sort by score and take top 3
        const topSentences = scoredSentences.sort((a, b)=>b.score - a.score).slice(0, 3).map((s)=>s.text);
        return topSentences.join('. ') + '.';
    }
    /**
   * Extract key facts and figures from content
   */ static extractKeyFacts(textContent) {
        const facts = [];
        // Extract sentences with numbers, percentages, dates
        const factPatterns = [
            /\b\d+(?:\.\d+)?%\b/g,
            /\b\d{4}\b/g,
            /\$[\d,]+(?:\.\d{2})?\b/g,
            /\b\d+(?:,\d{3})*(?:\.\d+)?\s*(?:million|billion|thousand|k|m|b)\b/gi,
            /\b\d+(?:\.\d+)?\s*(?:seconds|minutes|hours|days|weeks|months|years)\b/gi // Time
        ];
        const sentences = textContent.split(/[.!?]+/);
        sentences.forEach((sentence)=>{
            const trimmed = sentence.trim();
            if (trimmed.length > 20) {
                factPatterns.forEach((pattern)=>{
                    if (pattern.test(trimmed)) {
                        facts.push(trimmed);
                    }
                });
            }
        });
        // Remove duplicates and limit to 10 facts
        return Array.from(new Set(facts)).slice(0, 10);
    }
    /**
   * Extract Q&A pairs from FAQ sections
   */ static extractQAPairs($) {
        const qaPairs = [];
        // Look for common Q&A patterns
        const qaSelectors = [
            '.faq-item',
            '.qa-item',
            '.question-answer',
            '.accordion-item',
            '.collapsible-item'
        ];
        qaSelectors.forEach((selector)=>{
            $(selector).each((_, element)=>{
                const $element = $(element);
                // Try different patterns for questions and answers
                let question = $element.find('.question, .q, h3, h4, h5').first().text().trim();
                let answer = $element.find('.answer, .a, p').first().text().trim();
                if (!question || !answer) {
                    // Try alternative pattern: look for strong/bold text followed by regular text
                    const strongText = $element.find('strong, b').first().text().trim();
                    if (strongText && strongText.length > 10) {
                        question = strongText;
                        answer = $element.text().replace(strongText, '').trim();
                    }
                }
                if (question && answer && question.length > 10 && answer.length > 20) {
                    qaPairs.push({
                        question: question.replace(/[?]*$/, '?'),
                        answer: this.cleanAndCompress(answer)
                    });
                }
            });
        });
        return qaPairs.slice(0, 20); // Limit to 20 Q&A pairs
    }
    /**
   * Generate topic tags automatically
   */ static generateTopicTags(textContent, metadata) {
        const tags = new Set();
        // Extract from metadata keywords
        if (metadata.keywords) {
            const keywordString = typeof metadata.keywords === 'string' ? metadata.keywords : String(metadata.keywords);
            keywordString.split(/[,;]/).forEach((keyword)=>{
                const cleaned = keyword.trim().toLowerCase();
                if (cleaned.length > 2 && cleaned.length < 30) {
                    tags.add(cleaned);
                }
            });
        }
        // Extract common technical terms and industry keywords
        const commonTerms = [
            'api',
            'software',
            'service',
            'product',
            'support',
            'customer',
            'business',
            'integration',
            'solution',
            'platform',
            'system',
            'application',
            'data',
            'security',
            'payment',
            'ecommerce',
            'retail',
            'analytics',
            'dashboard',
            'mobile',
            'web',
            'cloud',
            'saas',
            'automation',
            'workflow',
            'enterprise'
        ];
        const lowerContent = textContent.toLowerCase();
        commonTerms.forEach((term)=>{
            if (lowerContent.includes(term)) {
                tags.add(term);
            }
        });
        // Extract capitalized words (likely proper nouns/brands)
        const capitalizedWords = textContent.match(/\b[A-Z][a-z]+\b/g) || [];
        capitalizedWords.forEach((word)=>{
            if (word.length > 3 && word.length < 20) {
                tags.add(word.toLowerCase());
            }
        });
        return Array.from(tags).slice(0, 15); // Limit to 15 tags
    }
    /**
   * Estimate token count using word-based approximation
   * This is a simplified version - for production, consider using tiktoken
   */ static estimateTokens(text) {
        // Rough approximation: 1 token ≈ 0.75 words for English text
        const words = text.split(/\s+/).length;
        return Math.ceil(words * 0.75);
    }
    /**
   * Helper methods
   */ static stripMarkdown(content) {
        return content.replace(/\*\*(.*?)\*\*/g, '$1') // Bold
        .replace(/\*(.*?)\*/g, '$1') // Italic
        .replace(/`(.*?)`/g, '$1') // Code
        .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // Links
        .replace(/^#+\s*/gm, '') // Headers
        .replace(/^[-*+]\s*/gm, '') // Lists
        .trim();
    }
    static extractHeadings($element) {
        const headings = [];
        $element.find('h1, h2, h3, h4, h5, h6').each((_, el)=>{
            const $el = _cheerio.load(el);
            const heading = $el.text().trim();
            if (heading && heading.length > 3) {
                headings.push(heading);
            }
        });
        return headings;
    }
    static extractKeywords(content) {
        // Simple keyword extraction based on word frequency
        const words = content.toLowerCase().replace(/[^\w\s]/g, ' ').split(/\s+/).filter((word)=>word.length > 3 && word.length < 20);
        const wordCount = new Map();
        words.forEach((word)=>{
            wordCount.set(word, (wordCount.get(word) || 0) + 1);
        });
        return Array.from(wordCount.entries()).filter(([word, count])=>count > 1).sort((a, b)=>b[1] - a[1]).slice(0, 10).map(([word])=>word);
    }
    static extractEntities(content) {
        // Simple entity extraction - look for capitalized words and common patterns
        const entities = new Set();
        // Capitalized words (proper nouns)
        const capitalizedWords = content.match(/\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*\b/g) || [];
        capitalizedWords.forEach((word)=>{
            if (word.length > 3 && word.length < 50) {
                entities.add(word);
            }
        });
        // Email addresses
        const emails = content.match(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g) || [];
        emails.forEach((email)=>entities.add(email));
        // URLs
        const urls = content.match(/https?:\/\/[^\s]+/g) || [];
        urls.forEach((url)=>entities.add(url));
        return Array.from(entities).slice(0, 15);
    }
    static generateChunkId(type, content) {
        const hash = (0, _crypto.createHash)('md5').update(content).digest('hex').substring(0, 8);
        return `${type}_${hash}`;
    }
    static calculateRelevanceScore(content, type) {
        // Base score by content length (longer content gets higher score)
        let score = Math.min(content.length / 1000, 1.0);
        // Boost score based on type-specific keywords
        const typeKeywords = {
            faq: [
                'question',
                'answer',
                'how',
                'what',
                'why',
                'when',
                'where'
            ],
            features: [
                'feature',
                'benefit',
                'advantage',
                'capability',
                'service'
            ],
            specs: [
                'specification',
                'technical',
                'parameter',
                'requirement',
                'detail'
            ],
            support: [
                'help',
                'support',
                'assist',
                'guide',
                'documentation',
                'contact'
            ],
            legal: [
                'terms',
                'privacy',
                'policy',
                'legal',
                'copyright',
                'license'
            ],
            main: [
                'overview',
                'introduction',
                'about',
                'description',
                'summary'
            ]
        };
        const keywords = typeKeywords[type] || [];
        const lowerContent = content.toLowerCase();
        keywords.forEach((keyword)=>{
            if (lowerContent.includes(keyword)) {
                score += 0.1;
            }
        });
        return Math.min(score, 1.0);
    }
    static cleanAndCompress(content) {
        return content.replace(/\s+/g, ' ').replace(/\n+/g, ' ').trim();
    }
    static normalizeSentence(sentence) {
        return sentence.toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, ' ').trim();
    }
    static calculateSimilarity(text1, text2) {
        const words1 = new Set(text1.split(/\s+/));
        const words2 = new Set(text2.split(/\s+/));
        const intersection = new Set([
            ...words1
        ].filter((x)=>words2.has(x)));
        const union = new Set([
            ...words1,
            ...words2
        ]);
        return intersection.size / union.size;
    }
    /**
   * Cache management
   */ static generateCacheKey(html, url) {
        const content = html.substring(0, 1000) + url; // Use first 1KB + URL for key
        return (0, _crypto.createHash)('md5').update(content).digest('hex');
    }
    static getFromCache(key) {
        const entry = this.cache.get(key);
        if (!entry) return null;
        const now = Date.now();
        if (now - entry.timestamp > entry.ttl) {
            this.cache.delete(key);
            return null;
        }
        return entry.content;
    }
    static setCache(key, content) {
        // Clean old entries if cache is too large
        if (this.cache.size >= this.MAX_CACHE_SIZE) {
            const oldestKey = this.cache.keys().next().value;
            if (oldestKey) {
                this.cache.delete(oldestKey);
            }
        }
        this.cache.set(key, {
            content,
            timestamp: Date.now(),
            ttl: this.CACHE_TTL
        });
    }
    /**
   * Clear cache (useful for testing or memory management)
   */ static clearCache() {
        this.cache.clear();
    }
    /**
   * Get cache statistics
   */ static getCacheStats() {
        return {
            size: this.cache.size,
            maxSize: this.MAX_CACHE_SIZE
        };
    }
} /**
 * Usage Examples:
 * 
 * // Basic usage
 * const optimizedContent = await AIContentExtractor.extractOptimized(html, url);
 * console.log(`Compression ratio: ${optimizedContent.compressionRatio * 100}%`);
 * console.log(`Original tokens: ${optimizedContent.originalTokens}`);
 * console.log(`Optimized tokens: ${optimizedContent.optimizedTokens}`);
 * 
 * // Access semantic chunks
 * const faqChunks = optimizedContent.chunks.filter(chunk => chunk.type === 'faq');
 * const mainChunks = optimizedContent.chunks
 *   .filter(chunk => chunk.type === 'main')
 *   .sort((a, b) => b.relevanceScore - a.relevanceScore);
 * 
 * // Use pre-computed insights
 * console.log('Summary:', optimizedContent.summary);
 * console.log('Key Facts:', optimizedContent.keyFacts);
 * console.log('Q&A Pairs:', optimizedContent.qaPairs);
 * console.log('Topic Tags:', optimizedContent.topicTags);
 * 
 * // Cache management
 * console.log('Cache stats:', AIContentExtractor.getCacheStats());
 * AIContentExtractor.clearCache(); // Clear cache if needed
 */ 

//# sourceMappingURL=data:application/json;base64,