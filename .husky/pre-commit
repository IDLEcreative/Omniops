#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🔍 Running pre-commit checks..."

# 1. File length validation (only check staged files)
echo "\n📏 Checking file lengths (300 LOC limit)..."
npx tsx scripts/check-file-length.ts --staged --strict
if [ $? -ne 0 ]; then
  echo "❌ File length check failed. Please refactor files exceeding 300 LOC."
  echo "   Run 'npx tsx scripts/check-file-length.ts --fix' for suggestions."
  exit 1
fi

# 2. Root directory clutter check
echo "\n🗂️  Checking for misplaced files in root directory..."
npx tsx scripts/check-root-clutter.ts --staged
if [ $? -ne 0 ]; then
  echo "❌ Root directory check failed. Files are in the wrong location."
  echo "   See CLAUDE.md 'FILE PLACEMENT RULES' for correct locations."
  exit 1
fi

# 3. Security check: Detect hardcoded tokens
echo "\n🔒 Checking for hardcoded secrets..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx|sh)$' || true)

if [ -n "$STAGED_FILES" ]; then
  # Check for Supabase Management API tokens
  if echo "$STAGED_FILES" | xargs grep -l "sbp_[a-f0-9]\{32\}" 2>/dev/null | grep -v "supabase-config\|\.example\|ARCHIVE\|test-samples"; then
    echo "❌ SECURITY: Hardcoded Supabase token detected!"
    echo "   Found 'sbp_' token in staged files."
    echo "   Use environment variables instead: SUPABASE_MANAGEMENT_TOKEN"
    echo "   See scripts/supabase-config.js for the correct pattern."
    exit 1
  fi

  # Check for hardcoded service role keys (long JWT tokens)
  if echo "$STAGED_FILES" | xargs grep -l "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\." 2>/dev/null | grep -v "\.example\|ARCHIVE\|test-samples"; then
    echo "❌ SECURITY: Hardcoded service role key detected!"
    echo "   Found JWT token in staged files."
    echo "   Use environment variables instead: SUPABASE_SERVICE_ROLE_KEY"
    exit 1
  fi

  # Check for other API keys (OpenAI, Stripe, etc.)
  if echo "$STAGED_FILES" | xargs grep -E "sk-[a-zA-Z0-9]{32,}|pk_(test|live)_[a-zA-Z0-9]{24,}" 2>/dev/null | grep -v "\.example\|ARCHIVE\|test-samples"; then
    echo "⚠️  WARNING: Potential API key detected!"
    echo "   Found pattern matching OpenAI/Stripe keys."
    echo "   Ensure this is in .env.example or test data only."
    echo "   Press Ctrl+C to abort, or Enter to continue..."
    read
  fi
fi

echo "   ✅ No hardcoded secrets detected"

# 4. Type checking (disabled due to memory issues with large Next.js projects)
# TODO: Re-enable with incremental compilation or smaller chunks
# echo "\n🔎 Running TypeScript type check..."
# npx tsc --noEmit
# if [ $? -ne 0 ]; then
#   echo "❌ Type check failed. Please fix TypeScript errors."
#   exit 1
# fi
echo "\n🔎 TypeScript type check: SKIPPED (memory constraints)"

# 4. Linting (disabled for faster commits - run manually with npm run lint)
# echo "\n🧹 Running ESLint..."
# npm run lint
# if [ $? -ne 0 ]; then
#   echo "❌ Linting failed. Please fix ESLint errors."
#   exit 1
# fi
echo "\n🧹 ESLint: SKIPPED (run 'npm run lint' manually)"

# 5. Run critical tests (disabled for faster commits - run manually with npm test)
# echo "\n🧪 Running tests..."
# npm test -- --bail --passWithNoTests
# if [ $? -ne 0 ]; then
#   echo "❌ Tests failed. Please fix failing tests before committing."
#   exit 1
# fi
echo "\n🧪 Tests: SKIPPED (run 'npm test' manually)"

echo "\n✅ All pre-commit checks passed!"
