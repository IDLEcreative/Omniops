--- lib/scraper-worker.js.original
+++ lib/scraper-worker.js
@@ -736,6 +736,12 @@
   // Filter out boilerplate chunks
   const nonBoilerplateChunks = allChunks.filter(chunk => !isDuplicateChunk(chunk, pageUrl));
   
+  // Skip deduplication entirely when force rescraping
+  if (FORCE_RESCRAPE) {
+    console.log(`[Worker ${jobId}] Force rescrape enabled - skipping deduplication for ${pageUrl}`);
+    return nonBoilerplateChunks;
+  }
+  
   // Now use the global deduplicator to filter out already-seen chunks
   const { unique, duplicates } = await deduplicator.filterDuplicates(nonBoilerplateChunks, pageUrl);
   
@@ -560,6 +566,66 @@
     }
   });
   
+  // Extract e-commerce specific data
+  const extractProductData = () => {
+    const productData = {};
+    
+    // Try to extract price
+    const priceSelectors = [
+      '.price', '.product-price', '.woocommerce-Price-amount', 
+      '[itemprop="price"]', '.regular-price', '.sale-price',
+      'span.amount', '.price-box', '.product-price-value'
+    ];
+    
+    for (const selector of priceSelectors) {
+      const priceElement = document.querySelector(selector);
+      if (priceElement) {
+        productData.price = priceElement.textContent?.trim();
+        break;
+      }
+    }
+    
+    // Try to extract availability/stock
+    const stockSelectors = [
+      '.stock', '.in-stock', '.out-of-stock', '.availability',
+      '[itemprop="availability"]', '.stock-status', '.product-stock'
+    ];
+    
+    for (const selector of stockSelectors) {
+      const stockElement = document.querySelector(selector);
+      if (stockElement) {
+        productData.availability = stockElement.textContent?.trim();
+        productData.inStock = !stockElement.textContent?.toLowerCase().includes('out of stock');
+        break;
+      }
+    }
+    
+    // Try to extract SKU
+    const skuSelectors = [
+      '.sku', '[itemprop="sku"]', '.product-sku', '.sku-number'
+    ];
+    
+    for (const selector of skuSelectors) {
+      const skuElement = document.querySelector(selector);
+      if (skuElement) {
+        productData.sku = skuElement.textContent?.trim();
+        break;
+      }
+    }
+    
+    // Add timestamp for when this was last checked
+    productData.lastChecked = new Date().toISOString();
+    
+    return productData;
+  };
+  
   return {
     title: getMeta('title') || document.title,
     description: getMeta('description'),
@@ -571,6 +637,7 @@
     image: getMeta('image'),
     site_name: getMeta('site_name'),
     ...structuredData,
+    ...extractProductData(), // Add e-commerce data
   };
 }
 
@@ -1038,7 +1105,17 @@
                   .eq('page_id', pageData.id);
                 
                 if (!existingEmbeddings || existingEmbeddings.length === 0 || FORCE_RESCRAPE) {
-                  // Generate embeddings for the content chunks
+                  if (FORCE_RESCRAPE && existingEmbeddings?.length > 0) {
+                    console.log(`[Worker ${jobId}] Force rescrape - deleting old embeddings for ${pageUrl}`);
+                    // Delete old embeddings before creating new ones
+                    await supabase
+                      .from('page_embeddings')
+                      .delete()
+                      .eq('page_id', pageData.id);
+                  }
+                  
+                  // Generate embeddings for the content chunks
                   const contentChunks = await createContentChunks(
                     pageData.content,
                     htmlContent,
@@ -1027,6 +1104,15 @@
             } else {
               console.log(`[Worker ${jobId}] Saved page to database: ${pageUrl}`);
               
+              // Log metadata when force rescraping
+              if (FORCE_RESCRAPE) {
+                console.log(`[Worker ${jobId}] Force rescrape metadata for ${pageUrl}:`, {
+                  price: dbRecord.metadata?.price,
+                  availability: dbRecord.metadata?.availability,
+                  sku: dbRecord.metadata?.sku,
+                  lastChecked: dbRecord.metadata?.lastChecked
+                });
+              }
+              
               // Generate embeddings for the content
               if (pageData.content && pageData.content.length > 0) {