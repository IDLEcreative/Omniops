name: Documentation Review Reminders

# Automatically create GitHub issues for scheduled documentation reviews
# Based on schedule defined in docs/.metadata/DOCUMENTATION_MAINTENANCE_SCHEDULE.md

on:
  schedule:
    # Monthly review: First Monday at 9 AM UTC (check daily to find first Monday)
    - cron: '0 9 * * 1'

    # Quarterly review: First day of quarter at 9 AM UTC
    - cron: '0 9 1 1,4,7,10 *'

    # Annual review warning: December 1 at 9 AM UTC
    - cron: '0 9 1 12 *'

    # Annual review start: December 15 at 9 AM UTC
    - cron: '0 9 15 12 *'

  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      review_type:
        description: 'Type of review to create'
        required: true
        type: choice
        options:
          - monthly
          - quarterly
          - annual
          - all

permissions:
  issues: write
  contents: read

jobs:
  create-review-issue:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get current date info
        id: date
        run: |
          echo "year=$(date +%Y)" >> $GITHUB_OUTPUT
          echo "month=$(date +%m)" >> $GITHUB_OUTPUT
          echo "month_name=$(date +%B)" >> $GITHUB_OUTPUT
          echo "day=$(date +%d)" >> $GITHUB_OUTPUT
          echo "day_of_week=$(date +%u)" >> $GITHUB_OUTPUT
          echo "quarter=$((($(date +%m) - 1) / 3 + 1))" >> $GITHUB_OUTPUT
          echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Check if first Monday of month
        id: check_monday
        run: |
          if [ "${{ steps.date.outputs.day_of_week }}" = "1" ] && [ "${{ steps.date.outputs.day }}" -le "7" ]; then
            echo "is_first_monday=true" >> $GITHUB_OUTPUT
          else
            echo "is_first_monday=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Monthly Review Issue
        if: |
          (github.event.schedule == '0 9 * * 1' && steps.check_monday.outputs.is_first_monday == 'true') ||
          (github.event_name == 'workflow_dispatch' && (github.event.inputs.review_type == 'monthly' || github.event.inputs.review_type == 'all'))
        uses: actions/github-script@v7
        with:
          script: |
            const month = '${{ steps.date.outputs.month_name }}';
            const year = '${{ steps.date.outputs.year }}';
            const date = '${{ steps.date.outputs.date }}';

            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'monthly-review',
              state: 'open',
            });

            // Check if issue already exists for this month
            const issueExists = existingIssues.some(issue =>
              issue.title.includes(`${month} ${year}`)
            );

            if (issueExists) {
              console.log('Monthly review issue already exists for this month');
              return;
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📋 Monthly Documentation Review - ${month} ${year}`,
              labels: ['documentation', 'monthly-review'],
              body: `# Monthly Documentation Review - ${month} ${year}

**Due Date:** ${date}
**Status:** ⏰ Pending
**Estimated Time:** 2-4 hours

## 📋 Tasks

- [ ] Run version audit: \`npx tsx scripts/audit-doc-versions.ts --report\`
- [ ] Review flagged documents from audit
- [ ] Update "Last Updated" dates (YYYY-MM-DD format)
- [ ] Test all code examples in critical docs
- [ ] Verify links are not broken
- [ ] Check for version number consistency
- [ ] Update version references if app version changed
- [ ] Commit documentation updates

## 📚 Documents to Review (10 critical)

1. CLAUDE.md
2. README.md
3. CHANGELOG.md
4. docs/01-ARCHITECTURE/database-schema.md
5. docs/01-ARCHITECTURE/search-architecture.md
6. docs/01-ARCHITECTURE/performance-optimization.md
7. docs/02-FEATURES/chat-system/hallucination-prevention.md
8. docs/.metadata/version-matrix.md
9. docs/00-GETTING-STARTED/for-developers.md
10. docs/00-GETTING-STARTED/for-devops.md

## 📖 Reference

See full checklist in: **docs/.metadata/DOCUMENTATION_MAINTENANCE_SCHEDULE.md**

## ✅ Completion

When complete:
- [ ] Close this issue
- [ ] Update metrics in maintenance schedule
- [ ] Commit with message: \`docs: monthly review ${month} ${year}\`

---

*Auto-generated by [Documentation Review Reminders workflow](.github/workflows/doc-review-reminders.yml)*
`
            });

      - name: Create Quarterly Review Issue
        if: |
          (github.event.schedule == '0 9 1 1,4,7,10 *') ||
          (github.event_name == 'workflow_dispatch' && (github.event.inputs.review_type == 'quarterly' || github.event.inputs.review_type == 'all'))
        uses: actions/github-script@v7
        with:
          script: |
            const quarter = '${{ steps.date.outputs.quarter }}';
            const year = '${{ steps.date.outputs.year }}';
            const date = '${{ steps.date.outputs.date }}';

            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'quarterly-review',
              state: 'open',
            });

            // Check if issue already exists for this quarter
            const issueExists = existingIssues.some(issue =>
              issue.title.includes(`Q${quarter} ${year}`)
            );

            if (issueExists) {
              console.log('Quarterly review issue already exists for this quarter');
              return;
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📚 Quarterly Documentation Review - Q${quarter} ${year}`,
              labels: ['documentation', 'quarterly-review', 'high-priority'],
              body: `# Quarterly Documentation Review - Q${quarter} ${year}

**Due Date:** ${date}
**Status:** ⏰ Pending
**Estimated Time:** 8-12 hours (1-2 days)
**Team:** Documentation Team

## 📋 Tasks

- [ ] Run full validation suite
- [ ] Update all code examples and snippets
- [ ] Verify screenshots and diagrams are current
- [ ] Check all external links for validity
- [ ] Update API reference documentation
- [ ] Review and update troubleshooting sections
- [ ] Check for new features requiring documentation
- [ ] Archive obsolete documentation to ARCHIVE/
- [ ] Update navigation and table of contents
- [ ] Commit batch updates with detailed changelog

## 📚 Review Scope (50+ documents)

- **docs/02-FEATURES/*** - All feature documentation
- **docs/04-DEVELOPMENT/*** - Development guides
- **docs/05-DEPLOYMENT/*** - Deployment and operations
- **docs/03-INTEGRATIONS/*** - Third-party integrations
- API reference documentation
- Setup and configuration guides

## 📖 Reference

See full quarterly checklist in: **docs/.metadata/DOCUMENTATION_MAINTENANCE_SCHEDULE.md**

## ✅ Completion

When complete:
- [ ] Close this issue
- [ ] Update metrics in maintenance schedule
- [ ] Generate quarterly report
- [ ] Commit with message: \`docs: quarterly review Q${quarter} ${year}\`

---

*Auto-generated by [Documentation Review Reminders workflow](.github/workflows/doc-review-reminders.yml)*
`
            });

      - name: Create Annual Audit Warning Issue
        if: |
          (github.event.schedule == '0 9 1 12 *') ||
          (github.event_name == 'workflow_dispatch' && (github.event.inputs.review_type == 'annual' || github.event.inputs.review_type == 'all'))
        uses: actions/github-script@v7
        with:
          script: |
            const year = '${{ steps.date.outputs.year }}';

            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'annual-audit',
              state: 'open',
            });

            // Check if warning issue already exists for this year
            const issueExists = existingIssues.some(issue =>
              issue.title.includes(`Reminder - ${year}`)
            );

            if (issueExists) {
              console.log('Annual audit reminder already exists for this year');
              return;
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🎯 Annual Documentation Audit Reminder - ${year}`,
              labels: ['documentation', 'annual-audit', 'high-priority'],
              body: `# Annual Documentation Audit - ${year}

⏰ **REMINDER:** The annual documentation audit is scheduled in **2 weeks**

**Scheduled Dates:** December 15-17, ${year}
**Duration:** 3 days
**Team:** Full documentation team + senior developers

## 📋 Preparation Tasks

- [ ] Block calendar for December 15-17 (3 days)
- [ ] Notify all team members
- [ ] Assign roles and responsibilities
- [ ] Review past year's monthly/quarterly reviews
- [ ] Prepare audit checklist
- [ ] Set up workspace and tools

## 🎯 Audit Objectives

- Complete system audit of all 400+ documentation files
- Analyze year-over-year metrics and trends
- Archive obsolete content systematically
- Plan improvements for ${parseInt(year) + 1}
- Update documentation roadmap
- Generate comprehensive annual report

## 📖 Reference

See full annual audit checklist in: **docs/.metadata/DOCUMENTATION_MAINTENANCE_SCHEDULE.md**

## 📅 Next Steps

A new issue will be created on December 15 when the audit begins.

---

*Auto-generated by [Documentation Review Reminders workflow](.github/workflows/doc-review-reminders.yml)*
`
            });

      - name: Create Annual Audit Start Issue
        if: |
          (github.event.schedule == '0 9 15 12 *')
        uses: actions/github-script@v7
        with:
          script: |
            const year = '${{ steps.date.outputs.year }}';
            const date = '${{ steps.date.outputs.date }}';

            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'annual-audit',
              state: 'open',
            });

            // Check if audit issue already exists for this year
            const issueExists = existingIssues.some(issue =>
              issue.title.includes(`Annual Documentation Audit - ${year}`) &&
              !issue.title.includes('Reminder')
            );

            if (issueExists) {
              console.log('Annual audit issue already exists for this year');
              return;
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🎯 Annual Documentation Audit - ${year}`,
              labels: ['documentation', 'annual-audit', 'critical'],
              body: `# Annual Documentation Audit - ${year}

🎯 **STARTS TODAY:** December 15-17, ${year}

**Status:** ⏰ In Progress
**Duration:** 3 days (Day 1 of 3)
**Team:** Full documentation team + senior developers

## 📅 Schedule

### Day 1: Assessment & Validation (Today)
- [ ] Run all validators and linters
- [ ] Review metrics and trends from past year
- [ ] Generate documentation metrics report
- [ ] Collect and analyze year-over-year data
- [ ] Identify stale documentation and gaps

### Day 2: Content Review & Updates (December 16)
- [ ] Review all critical documentation (10 docs)
- [ ] Review all feature documentation (50+ docs)
- [ ] Update code examples and screenshots
- [ ] Test developer onboarding experience
- [ ] Validate operations documentation

### Day 3: Planning & Improvements (December 17)
- [ ] Archive obsolete content
- [ ] Improve structure and organization
- [ ] Update automation scripts
- [ ] Plan ${parseInt(year) + 1} roadmap
- [ ] Generate annual report

## 🎯 Objectives

- [x] Complete system audit of all 400+ documentation files
- [ ] Analyze year-over-year metrics
- [ ] Plan improvements for ${parseInt(year) + 1}
- [ ] Update documentation roadmap
- [ ] Generate annual report

## 📊 Metrics to Track

- Total documents: ____
- Documents created this year: ____
- Documents updated this year: ____
- Documents archived this year: ____
- Documentation health score: ____%

## 📖 Reference

See full annual audit checklist in: **docs/.metadata/DOCUMENTATION_MAINTENANCE_SCHEDULE.md**

## ✅ Completion

When complete:
- [ ] Annual report generated
- [ ] All changes committed
- [ ] Tagged as: \`docs-audit-${year}\`
- [ ] Maintenance schedule updated for ${parseInt(year) + 1}
- [ ] Next year's reminders scheduled
- [ ] Close this issue

---

*Auto-generated by [Documentation Review Reminders workflow](.github/workflows/doc-review-reminders.yml)*
`
            });

      - name: Summary
        run: |
          echo "✅ Documentation review reminders processed"
          echo "Date: ${{ steps.date.outputs.date }}"
          echo "First Monday: ${{ steps.check_monday.outputs.is_first_monday }}"
          echo "Quarter: Q${{ steps.date.outputs.quarter }}"
