name: Documentation Version Check

on:
  pull_request:
    paths:
      - 'docs/**'
      - '*.md'
      - 'package.json'
  push:
    branches:
      - main
      - develop

jobs:
  check-doc-versions:
    name: Check Documentation Versions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git log

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run documentation version audit
        id: audit
        run: |
          npx tsx scripts/audit-doc-versions.ts --report
        continue-on-error: true

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: doc-version-audit-report
          path: docs/reports/doc-version-audit.md
          retention-days: 30

      - name: Check for critical failures
        if: steps.audit.outcome == 'failure'
        run: |
          echo "::error::Documentation version audit failed"
          echo "::notice::Review the audit report artifact for details"
          exit 1

      - name: Post PR comment with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'docs/reports/doc-version-audit.md';

            if (!fs.existsSync(reportPath)) {
              console.log('No audit report found');
              return;
            }

            const report = fs.readFileSync(reportPath, 'utf8');

            // Extract summary
            const summaryMatch = report.match(/## Summary\n\n([\s\S]*?)\n\n---/);
            const summary = summaryMatch ? summaryMatch[1] : 'No summary available';

            // Check for failures
            const hasFailures = report.includes('❌ Failed');
            const hasWarnings = report.includes('⚠️ Warnings');

            let emoji = '✅';
            let status = 'passed';
            if (hasFailures) {
              emoji = '❌';
              status = 'failed';
            } else if (hasWarnings) {
              emoji = '⚠️';
              status = 'passed with warnings';
            }

            const body = `## ${emoji} Documentation Version Audit

            **Status:** ${status}

            ${summary}

            ${hasFailures ? '**Action Required:** Please update outdated documentation before merging.' : ''}

            <details>
            <summary>View full audit report</summary>

            \`\`\`
            See the "doc-version-audit-report" artifact for the complete report
            \`\`\`

            </details>
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Documentation Version Audit')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body,
              });
            }

  check-version-consistency:
    name: Check Version Consistency
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check package.json version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Check CHANGELOG.md has current version
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"

          if ! grep -q "\[Unreleased\]" CHANGELOG.md && ! grep -q "\[$VERSION\]" CHANGELOG.md; then
            echo "::error::CHANGELOG.md is missing entry for version $VERSION"
            echo "::notice::Please add a CHANGELOG entry for this version"
            exit 1
          fi

          echo "✅ CHANGELOG.md has entry for v$VERSION or [Unreleased]"

      - name: Check version-matrix.md is current
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"

          if [ -f "docs/.metadata/version-matrix.md" ]; then
            if ! grep -q "$VERSION" docs/.metadata/version-matrix.md; then
              echo "::warning::version-matrix.md may need updating for v$VERSION"
            else
              echo "✅ version-matrix.md references v$VERSION"
            fi
          else
            echo "::warning::version-matrix.md not found"
          fi
